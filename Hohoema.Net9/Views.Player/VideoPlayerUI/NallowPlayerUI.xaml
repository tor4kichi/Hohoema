<UserControl
  x:Class="Hohoema.Views.Player.VideoPlayerUI.NallowPlayerUI"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="using:Hohoema.Views.Player.VideoPlayerUI"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:i="using:Microsoft.Xaml.Interactivity"
  xmlns:mybehavior="using:Hohoema.Views.Behaviors"
  xmlns:models="using:Hohoema.Models.Application"
  xmlns:viewmodel="using:Hohoema.ViewModels"
  xmlns:sidepaneVM="using:Hohoema.ViewModels.Player.PlayerSidePaneContent"
  xmlns:myTrigger="using:Hohoema.Views.StateTrigger"
  xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI"
  xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
  xmlns:model="using:Hohoema.Models"
  xmlns:winui="using:Microsoft.UI.Xaml.Controls"
  xmlns:controls="using:Hohoema.Views.Controls"
  xmlns:system1="using:System"
  xmlns:templateselector="using:Hohoema.Views.TemplateSelector"
  xmlns:triggers="using:Microsoft.Toolkit.Uwp.UI.Triggers" 
  xmlns:players="using:Hohoema.Views.Player"
  xmlns:animation="using:Microsoft.Toolkit.Uwp.UI.Animations"
  xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
  xmlns:myExt="using:Hohoema.Views.Extensions"
  x:Name="RootLayout"
  mc:Ignorable="d"
  d:DesignHeight="300"
  d:DesignWidth="400">

  <UserControl.Resources>

    <Style TargetType="Button">
      <Setter Property="MinWidth" Value="48" />
      <Setter Property="MinHeight" Value="48" />
    </Style>
    <Style TargetType="ToggleButton">
      <Setter Property="MinWidth" Value="48" />
      <Setter Property="MinHeight" Value="48" />
    </Style>

    <Style TargetType="CommandBar">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="DefaultLabelPosition" Value="Right" />
    </Style>



    <MenuFlyout x:Key="VideoOptionsFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PlayPauseToggleButtonTitle}" Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding ObservableMediaPlayer.IsMuted.Value, Mode=TwoWay}" Text="{i18nExt:Localize Key=Mute}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding PlayerSettings.IsCommentDisplay_Video, Mode=TwoWay, Converter={StaticResource BoolNegation}}" Text="{i18nExt:Localize Key=ToggleHideComment}" />
      <MenuFlyoutSubItem Text="{Binding Source=Quality, Converter={StaticResource LocalizeConverter}}" Visibility="{Binding VideoPlayer.AvailableQualities, Converter={StaticResource CollectionVisibilityConverter}}" x:Name="VideoQualityMenuFlyoutSubImte">
        <i:Interaction.Behaviors>
          <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{Binding VideoPlayer.AvailableQualities}" CustomObjectToTag="{Binding}">
            <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
              <DataTemplate>
                <MenuFlyoutItem IsEnabled="{Binding IsAvailable}" Text="{Binding Quality, Converter={StaticResource LocalizeConverter}}" Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.VideoPlayer.ChangePlayQualityCommand}" CommandParameter="{Binding}"></MenuFlyoutItem>
              </DataTemplate>
            </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
          </mybehavior:MenuFlyoutSubItemItemsSetter>
        </i:Interaction.Behaviors>
      </MenuFlyoutSubItem>
      <MenuFlyoutSubItem Text="{i18nExt:Localize Key=PlaybackRate}">
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="200%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>2.0</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="175%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="150%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="125%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="75%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="50%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="25%" Command="{Binding SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
      </MenuFlyoutSubItem>
      <MenuFlyoutSeparator />
      <MenuFlyoutItem x:Name="FullscreenButton_Menu" Command="{Binding PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="CompactOverlayButton_Menu" Command="{Binding PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=CompactOverlay}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="SmallWindowButton_Menu" Command="{Binding PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=WindowInWindow}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="DisplayWithSecondaryViewButton_Menu" Command="{Binding TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=PlayWithSecondaryView}"></MenuFlyoutItem>
    </MenuFlyout>
  </UserControl.Resources>
  <Grid x:Name="UIControlLayout" 
        ContextFlyout="{StaticResource VideoOptionsFlyout}"
        ManipulationMode="TranslateX"
        >

    <i:Interaction.Behaviors>

      <!-- スペースキー入力で再生停止の切り替え-->
      <mybehavior:KeyboardTrigger Key="Space" x:Name="PlayPauseToggleKeyboardTrigger">
        <i:InvokeCommandAction Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
      </mybehavior:KeyboardTrigger>
      <mybehavior:KeyboardTrigger Key="Enter" x:Name="CommentSubmitKeyboardTrigger">
        <mybehavior:KeyboardTrigger.Actions>
          <i:InvokeCommandAction Command="{Binding CommentPlayer.CommentSubmitCommand}" />
        </mybehavior:KeyboardTrigger.Actions>
      </mybehavior:KeyboardTrigger>
      <mybehavior:KeyboardTrigger Key="Escape" x:Name="CommentWriteExitKeyboardTrigger" IsEnabled="False">
        <mybehavior:KeyboardTrigger.Actions>
          <i:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
          <i:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
        </mybehavior:KeyboardTrigger.Actions>
      </mybehavior:KeyboardTrigger>
      <mybehavior:KeyboardTrigger Key="Right" x:Name="VideoForwardKeyboardTrigger">
        <mybehavior:KeyboardTrigger.Actions>
          <i:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{Binding ForwardSeekTime}" />
        </mybehavior:KeyboardTrigger.Actions>
      </mybehavior:KeyboardTrigger>
      <mybehavior:KeyboardTrigger Key="Left" x:Name="VideoPreviewKeyboardTrigger">
        <mybehavior:KeyboardTrigger.Actions>
          <i:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{Binding PreviewSeekTime}" />
        </mybehavior:KeyboardTrigger.Actions>
      </mybehavior:KeyboardTrigger>
      <mybehavior:KeyboardTrigger x:Name="CommentWriteBeginKeyboardTrigger">
        <mybehavior:KeyboardTrigger.Actions>
          <mybehavior:SetFocus TargetObject="{Binding ElementName=CommentTextBox}" Delay="00:00:00" />
        </mybehavior:KeyboardTrigger.Actions>
      </mybehavior:KeyboardTrigger>
      <mybehavior:MouseWheelTrigger>
        <mybehavior:MouseWheelTrigger.UpActions>
          <i:InvokeCommandAction Command="{Binding VolumeUpCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
        </mybehavior:MouseWheelTrigger.UpActions>
        <mybehavior:MouseWheelTrigger.DownActions>
          <i:InvokeCommandAction Command="{Binding VolumeDownCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
        </mybehavior:MouseWheelTrigger.DownActions>
      </mybehavior:MouseWheelTrigger>
      <mybehavior:UINavigationTrigger x:Name="ConrollerHidePlayerTrigger" Kind="Cancel" Hold="True" IsEnabled="True">
        <i:InvokeCommandAction Command="{Binding PrimaryViewPlayerManager.CloseCommand}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerSeekPreviewTrigger" Kind="PageLeft" IsEnabled="True">
        <i:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{Binding PreviewSeekTime}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerSeekForwardTrigger" Kind="PageRight" IsEnabled="True">
        <i:InvokeCommandAction Command="{Binding SeekCommand}" CommandParameter="{Binding ForwardSeekTime}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerTogglePlayPauseTrigger" Kind="Context1" IsEnabled="True">
        <i:InvokeCommandAction Command="{Binding VideoPlayer.TogglePlayPauseCommand}" />
      </mybehavior:UINavigationTrigger>

      <!-- 再生停止時にUIを表示 -->
      <i:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value}" Value="False" ComparisonCondition="Equal">
        <i:ChangePropertyAction TargetObject="{x:Bind DefaultUIControl}" PropertyName="Visibility" Value="Visible" />
      </i:DataTriggerBehavior>
      <i:DataTriggerBehavior Binding="{Binding ObservableMediaPlayer.NowPlaying.Value}" Value="True" ComparisonCondition="Equal">
        <i:ChangePropertyAction TargetObject="{x:Bind DefaultUIControl}"  PropertyName="Visibility"  Value="Collapsed" />
      </i:DataTriggerBehavior>


      <!-- 左右スワイプでシーク -->
      <mybehavior:Swipe x:Name="SeekSwipe" SwipeCommand="{Binding SeekCommand}" SwipeAmountConverter="{StaticResource SwipeSeekValueToTimeSpan}" SwipeAmountScale="0.15" SwipeEdgeOfPlay="48" />

      <!-- コントローラーのBボタンでUIを再表示 -->
      <mybehavior:UINavigationTrigger Kind="Cancel" x:Name="ControllerToggleDisplayUITrigger" IsEnabled="True">
        <i:ChangePropertyAction TargetObject="{x:Bind DefaultUIControl}" PropertyName="Visibility" Value="{x:Bind DefaultUIControl.Visibility, Converter={StaticResource InvertVisibility}}" />
      </mybehavior:UINavigationTrigger>



      <i:DataTriggerBehavior Binding="{x:Bind DefaultUIControl.Visibility, Mode=OneWay}" Value="Visible">
        <mybehavior:SetFocus x:Name="FocusWhenShowingControlUIAction" TargetObject="{Binding ElementName=PlayPauseButton}" Delay="00:00:00" IsEnabled="False" />
      </i:DataTriggerBehavior>

      <!-- マウスの非表示 -->
      <mybehavior:PointerCursorAutoHideBehavior x:Name="AutoHideCursor" IsAutoHideEnabled="False" AutoHideDelay="0:0:1" />

      <i:EventTriggerBehavior EventName="Loaded">
        <mybehavior:SetFocus TargetObject="{Binding ElementName=RootLayout}" />
      </i:EventTriggerBehavior>


    </i:Interaction.Behaviors>

    <!-- UI非表示時の再生位置バー -->
    <Slider x:Name="ReadOnlySeekBarSlider"
            Value="{Binding ElementName=SeekBarSlider, Path=Value, Mode=TwoWay}" 
            Maximum="{Binding VideoInfo.Length, Converter={StaticResource TimeSpanToDoubleConverter}}" 
            Style="{StaticResource VideoProgressBarStyle}" 
            HorizontalAlignment="Stretch" VerticalAlignment="Bottom" IsEnabled="False" Opacity="0.6" 
            Foreground="{ThemeResource SystemAccentColorDark2}"
            >
      <Slider.RenderTransform>
        <TranslateTransform Y="8" />
      </Slider.RenderTransform>
    </Slider>

    <!-- プレイヤー内の通知表示 -->
    <StackPanel>
      <!-- 音量表示 -->
      <controls:TransientContainer Content="{Binding SoundVolumeManager.Volume}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="16">
        <controls:TransientContainer.Background>
          <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
        </controls:TransientContainer.Background>
        <controls:TransientContainer.ContentTemplate>
          <DataTemplate>
            <Grid Margin="16 2 16 4">
              <Border>
                <TextBlock FontSize="20" VerticalAlignment="Center">
                          <Run Text="{i18nExt:Localize Key=SoundVolume}" />:
                          <Run Text="{Binding Converter={StaticResource ToUserFriendlySoubleVolume}}" FontSize="22" />%
                </TextBlock>
              </Border>
            </Grid>
          </DataTemplate>
        </controls:TransientContainer.ContentTemplate>
      </controls:TransientContainer>
      <!-- シーク位置表示 -->
      <controls:TransientContainer Content="{x:Bind SeekSwipe.SwipeAmount, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16" DisplayDuration="0:0:3">
        <controls:TransientContainer.Background>
          <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
        </controls:TransientContainer.Background>
        <controls:TransientContainer.ContentTemplate>
          <DataTemplate>
            <Grid Margin="16 2 16 4">
              <Border>
                <TextBlock FontSize="25" VerticalAlignment="Center" TextLineBounds="TrimToBaseline">
                           <Run Text="{i18nExt:Localize Key=SeekPlaybackPosition}" />: <Run Text="{Binding Converter={StaticResource TimeToMovieLengthConverter}}" /> <Run Text="{i18nExt:Localize Key=Seconds}" />
                </TextBlock>
              </Border>
            </Grid>
          </DataTemplate>
        </controls:TransientContainer.ContentTemplate>
      </controls:TransientContainer>
    </StackPanel>


    <!-- コントロールUIを表示切替する -->
    <Border IsHitTestVisible="True" Background="Transparent">
      <i:Interaction.Behaviors>
        <i:EventTriggerBehavior EventName="Tapped">
          <i:ChangePropertyAction TargetObject="{x:Bind DefaultUIControl}" PropertyName="Visibility" Value="Visible" />
        </i:EventTriggerBehavior>
      </i:Interaction.Behaviors>
    </Border>



    <Grid x:Name="DefaultUIControl">
      <animation:Implicit.ShowAnimations>
        <animation:OpacityAnimation To="1.0" Duration="0:0:0.5" />
      </animation:Implicit.ShowAnimations>
      <animation:Implicit.HideAnimations>
        <animation:OpacityAnimation To="0.0" Duration="0:0:0.25" />
      </animation:Implicit.HideAnimations>

      <Grid Background="{ThemeResource HohoemaPlayerBackgroundBrush}" IsHitTestVisible="True">
        <i:Interaction.Behaviors>
          <i:EventTriggerBehavior EventName="Tapped">
            <i:ChangePropertyAction TargetObject="{x:Bind DefaultUIControl}" PropertyName="Visibility" Value="{x:Bind DefaultUIControl.Visibility, Converter={StaticResource InvertVisibility}}" />
          </i:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </Grid>
      
      <uwpControls:DockPanel>

        <!-- 上側 プレイリスト 操作 -->
        <uwpControls:DockPanel x:Name="UIControlHeaderLayout" uwpControls:DockPanel.Dock="Top">

          <!-- Title Bar Margin -->
          <Grid x:Name="TitleBarMarginLayout" Height="32" uwpControls:DockPanel.Dock="Top" Visibility="Collapsed">
            <TextBlock x:Name="TitleTextBlock" Text="{Binding VideoInfo.Title}" Style="{ThemeResource CaptionTextBlockStyle}" Visibility="Collapsed" Margin="8" />
          </Grid>
          <!-- 左上 -->
          <StackPanel Orientation="Horizontal" uwpControls:DockPanel.Dock="Left">
            <!-- 閉じる -->
            <Button x:Name="CloseButton" Command="{Binding PrimaryViewPlayerManager.CloseCommand}" Background="Transparent" UseSystemFocusVisuals="True" Width="48" Height="48">
              <SymbolIcon Symbol="Clear" />
            </Button>

            <!-- メインウィンドウ表示 -->
            <Button x:Name="ShowPrimaryViewButton" Command="{Binding ShowPrimaryViewCommand}" Background="Transparent" Visibility="Collapsed">
              <StackPanel Orientation="Vertical">
                <TextBlock Text="{i18nExt:Localize Key=SwitchToMainWindow}" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
              </StackPanel>
            </Button>
          </StackPanel>
          <!-- 右上 -->
          <Button x:Name="ExitWindonwInWindowViewButton" Command="{Binding PrimaryViewPlayerManager.FillCommand}" Background="Transparent" Visibility="Collapsed" uwpControls:DockPanel.Dock="Right" Margin="0 8 0 0">
            <SymbolIcon Symbol="FullScreen" />
          </Button>
          <Button x:Name="ExitCompactOverlayButton" Command="{Binding PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" uwpControls:DockPanel.Dock="Right" Margin="0 8 0 0">
            <SymbolIcon Symbol="FullScreen" />
          </Button>

          <Border />
        </uwpControls:DockPanel>
        <!-- 下側 動画コンテンツ 操作 -->
        <StackPanel x:Name="UIControlContentLayout" uwpControls:DockPanel.Dock="Bottom" Padding="0 0 0 8">
          <!-- シークバー -->
          <Grid Margin="0 0 0 12">
            <TextBlock x:Name="SeekDisabledFromNicoScriptText" Text="{i18nExt:Localize Key=DisableSeekFromNicoScript}" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Center" Opacity="0.6" />
          </Grid>
          <!-- 動画画質 -->
          <Grid x:Name="VideoProps" Margin="0 0 0 8">
            <!-- 画質と動画プロバイダーオリジン -->
            <StackPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Orientation="Horizontal" Margin="8 0 16 0" Spacing="8">
              <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.NowPlayingWithDmcVideo,Converter={StaticResource BooleanToVisibilityInverted}}">
                            <Run Text="{Binding VideoPlayer.CurrentQuality.Quality, Converter={StaticResource LocalizeConverter}}" /></TextBlock>
              <HyperlinkButton Visibility="{Binding VideoPlayer.NowPlayingWithDmcVideo,Converter={StaticResource BooleanToVisibility}}" Padding="0" Opacity="0.7">
                <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}">
                              <Run Text="{Binding VideoPlayer.CurrentQuality.Quality, Converter={StaticResource LocalizeConverter}}" /></TextBlock>
                <i:Interaction.Behaviors>
                  <i:EventTriggerBehavior EventName="Click">
                    <mybehavior:OpenFlyout />
                  </i:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <FlyoutBase.AttachedFlyout>
                  <Flyout>
                    <ListView ItemsSource="{Binding VideoPlayer.AvailableQualities, Mode=OneWay}"
                                      SelectedItem="{Binding VideoPlayer.CurrentQuality, Mode=OneWay}"
                                      SelectionMode="Single"
                                      IsItemClickEnabled="True"
                                      >
                      <i:Interaction.Behaviors>
                        <i:EventTriggerBehavior EventName="ItemClick">
                          <i:InvokeCommandAction Command="{Binding VideoPlayer.ChangePlayQualityCommand}"
                                                            InputConverter="{StaticResource ItemClickEventArgsConverter}" />
                        </i:EventTriggerBehavior>
                      </i:Interaction.Behaviors>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBlock Text="{Binding Quality, Converter={StaticResource LocalizeConverter}}" />
                            <TextBlock >
                                           <Run Text="{Binding Bitrate, Converter={StaticResource ToKMGTPEZY}}" />bps</TextBlock>
                          </StackPanel>
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </Flyout>
                </FlyoutBase.AttachedFlyout>
              </HyperlinkButton>
              <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibility}}">
                                                        (<Run Text="{i18nExt:Localize Key=VideoPlayWithCached}" />)</TextBlock>
              <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding VideoPlayer.IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibilityInverted}}">
                                                        (<Run Text="{i18nExt:Localize Key=VideoPlayWithOnline}" />)</TextBlock>
            </StackPanel>

            <!-- 動画位置と再生速度倍率 -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
              <TextBlock VerticalAlignment="Bottom" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="16 0 8 0">
                                        
              <Run Text="{x:Bind VideoPosition, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" />
              <Run Text="/" />
              <Run Text="{Binding VideoInfo.Length, Converter={StaticResource TimeToMovieLengthConverter}}" /></TextBlock>
              <HyperlinkButton Margin="0 0 16 0" VerticalAlignment="Bottom" Opacity="0.7" MinWidth="36" HorizontalAlignment="Right" Padding="0">
                <i:Interaction.Behaviors>
                  <i:EventTriggerBehavior EventName="Click">
                    <mybehavior:OpenFlyout />
                  </i:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <FlyoutBase.AttachedFlyout>
                  <Flyout>
                    <ListView ItemsSource="{Binding PlaybackRateList, Mode=OneTime}"
                                      SelectedItem="{Binding ObservableMediaPlayer.PlaybackRate.Value, Mode=OneWay}"
                                      SelectionMode="Single"
                                      IsItemClickEnabled="True"
                                      >
                      <i:Interaction.Behaviors>
                        <i:EventTriggerBehavior EventName="ItemClick">
                          <i:InvokeCommandAction Command="{Binding SetPlaybackRateCommand}"
                                                            InputConverter="{StaticResource ItemClickEventArgsConverter}" />
                        </i:EventTriggerBehavior>
                      </i:Interaction.Behaviors>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <TextBlock>x<Run Text="{Binding}" /></TextBlock>
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </Flyout>
                </FlyoutBase.AttachedFlyout>
                <TextBlock VerticalAlignment="Center">x<Run Text="{Binding ObservableMediaPlayer.PlaybackRate.Value}" /></TextBlock>
              </HyperlinkButton>
            </StackPanel>
          </Grid>
          <!-- ボタン類 -->
          <Grid Padding="8 0 8 0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal">
              <!-- 音量 -->
              <Button x:Name="VolumeControlLayout" Background="Transparent">
                <SymbolIcon x:Name="VolumeButton" Symbol="Mute" />
                <Button.Flyout>
                  <Flyout>
                    <StackPanel Spacing="16" HorizontalAlignment="Stretch" MinWidth="240">
                      <Grid>
                        <TextBlock Text="{i18nExt:Localize Key=LoudnessCorrectionValueTitle}" uwpControls:DockPanel.Dock="Left" />
                        <TextBlock HorizontalAlignment="Right">
                                  <Run Text="{Binding SoundVolumeManager.LoudnessCorrectionValue, Converter={StaticResource ToUserFriendlySoubleVolume}}" />%
                        </TextBlock>
                      </Grid>
                      <Grid>
                        <TextBlock Text="{i18nExt:Localize Key=UseLoudnessCorrection}" uwpControls:DockPanel.Dock="Left" />
                        <ToggleSwitch IsOn="{Binding SoundVolumeManager.IsLoudnessCorrectionEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Style="{StaticResource ToggleSwitchNoHeader}" MinWidth="0" />
                      </Grid>
                      <Grid>
                        <TextBlock Text="{i18nExt:Localize Key=Mute}" uwpControls:DockPanel.Dock="Left" VerticalAlignment="Center" />
                        <AppBarButton Icon="Volume" Label="{i18nExt:Localize Key=Mute}" VerticalAlignment="Stretch" x:Name="MuteToggleButton" Command="{Binding ToggleMuteCommand}" HorizontalAlignment="Right" />
                      </Grid>
                      <Grid>
                        <TextBlock Text="{i18nExt:Localize Key=SoundVolume}"  uwpControls:DockPanel.Dock="Left" VerticalAlignment="Center" />
                        <Slider x:Name="VolumeSlider" Orientation="Horizontal" VerticalAlignment="Top" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}" Maximum="1.0" Minimum="0.0" StepFrequency="0.01" SmallChange="0.05" LargeChange="0.1" Height="32" Width="160" ValueChanged="VolumeSlider_ValueChanged" HorizontalAlignment="Right" TabIndex="-1" />
                      </Grid>
                    </StackPanel>
                  </Flyout>
                </Button.Flyout>
              </Button>
              <!-- コメント表示切替 -->
              <Button x:Name="CommentDisplayControlLayout" Background="Transparent">
                <Grid>
                  <SymbolIcon Symbol="Comment" x:Name="CommentIcon" Width="20" Height="20" />
                  <Canvas>
                    <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="4" Visibility="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                  </Canvas>
                </Grid>
                <i:Interaction.Behaviors>
                  <i:EventTriggerBehavior EventName="Tapped">
                    <i:ChangePropertyAction TargetObject="{Binding PlayerSettings}" PropertyName="IsCommentDisplay_Video" Value="{Binding PlayerSettings.IsCommentDisplay_Video, Converter={StaticResource BoolNegation}}" />
                  </i:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </Button>

              <!-- 単品リピート -->
              <!--
            <ToggleButton IsChecked="{Binding VideoPlayer.IsCurrentVideoLoopingEnabled.Value, Mode=TwoWay}" Background="Transparent" UseSystemFocusVisuals="True">
              <iconPack:PackIconMaterial x:Name="RepeatModeToggleButtonIcon" Kind="Repeat" RenderTransformOrigin="0.5, 0.5">
                <iconPack:PackIconMaterial.RenderTransform>
                  <CompositeTransform ScaleX="1.4" ScaleY="1.4" />
                </iconPack:PackIconMaterial.RenderTransform>
              </iconPack:PackIconMaterial>

            </ToggleButton>
            -->
            </StackPanel>
            <!-- 再生切り替え・シーク -->
            <StackPanel Orientation="Horizontal" Grid.Column="1">
              <Button x:Name="PreviewVideoPositionButon" Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{Binding PreviewSeekTime}"  Margin="0 0 24 0">
                <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" FontSize="24" />
              </Button>
              <Button x:Name="PlayPauseButton" Command="{Binding VideoPlayer.TogglePlayPauseCommand}" Background="Transparent" Margin="0 0 0 0">
                <SymbolIcon Symbol="Play" x:Name="PlayPauseButtonIcon" RenderTransformOrigin="0.5, 0.5">
                  <SymbolIcon.RenderTransform>
                    <CompositeTransform ScaleX="1.35" ScaleY="1.35" />
                  </SymbolIcon.RenderTransform>
                </SymbolIcon>
              </Button>
              <Button x:Name="ForwardVideoPositionButon" Background="Transparent" Command="{Binding SeekCommand}" CommandParameter="{Binding ForwardSeekTime}" Margin="24 0 0 0">
                <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;" FontSize="24" />
              </Button>
            </StackPanel>
            <!-- Settings etc -->
            <uwpControls:WrapPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center">
            </uwpControls:WrapPanel>
          </Grid>
          <!-- コメントを書く -->
          <Grid x:Name="CommentLayout" Padding="0 8 0 0" Visibility="Collapsed">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <TextBox x:Name="CommentTextBox" Text="{Binding CommentPlayer.WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource BGTransparentTextBoxStyle}" FontSize="18" VerticalAlignment="Center" MaxLength="75" IsTabStop="True" PlaceholderText="{i18nExt:Localize Key=CommentTextBoxPlacefolder}" HorizontalAlignment="Stretch" Margin="8 0 8 0" HorizontalContentAlignment="Stretch" Height="40" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="4" IsEnabled="{Binding CommentPlayer.NowCommentSubmitDisabledFromNicoScript, Converter={StaticResource BoolNegation}}"></TextBox>
            <Button x:Name="CommentCommandEditButton"
                            Content="{Binding CommentCommandEditerViewModel.CommandsText.Value, Mode=OneWay}"                            
                            Margin="8 0 8 0" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" DataContext="{Binding}" Height="40" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="1">
              <Button.Flyout>
                <Flyout x:Name="CommandEditerFlyout">
                  <players:CommentCommandEditer x:Name="CommandEditer" DataContext="{Binding CommentCommandEditerViewModel}" />
                </Flyout>
              </Button.Flyout>

              <i:Interaction.Behaviors>
                <i:DataTriggerBehavior Binding="{Binding CommentCommandEditerViewModel.CommandsText.Value}" Value="{x:Null}" ComparisonCondition="NotEqual">
                  <i:ChangePropertyAction TargetObject="{Binding CommentPlayer.CommandText}" PropertyName="Value" Value="{Binding CommentCommandEditerViewModel.CommandsText.Value}" />
                </i:DataTriggerBehavior>
              </i:Interaction.Behaviors>
            </Button>
            <Button x:Name="CommentSubmitButton" Margin="8 0 8 0" Height="40" Command="{Binding CommentPlayer.CommentSubmitCommand}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="5" Grid.ColumnSpan="1">
              <Grid>
                <TextBlock Text="{i18nExt:Localize Key=SubmitComment}" />
                <ProgressRing x:Name="CommentSubmittingProgressRing" IsActive="False" Height="24" Width="24" VerticalAlignment="Center" />
              </Grid>
            </Button>
          </Grid>
        </StackPanel>
        <!-- 中央 余白とリコメンド -->
        <Grid x:Name="UIControlCenterLayout" BorderThickness="0">
          <Border x:Name="PlayEndedRecommendContainer" Visibility="Collapsed">
            <controls:DelayedAutoTriggerButton x:Name="PlayEndedRecommend" Command="{Binding VideoEndedRecommendation.PlayNextVideoCommand}" CancelCommand="{Binding VideoEndedRecommendation.CanceledNextPartMoveCommand}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="40 0" IsAutoTriggerEnabled="{Binding PlayerSettings.AutoMoveNextVideoOnPlaylistEmpty}">
              <controls:DelayedAutoTriggerButton.CenterContent>
                <StackPanel Spacing="4">
                  <TextBlock Text="{i18nExt:Localize Key=RecommendedNextVideo}" Opacity="0.7" />
                  <TextBlock x:Name="RecommendVideoTitle" Text="{Binding VideoEndedRecommendation.NextVideoTitle}" Style="{StaticResource BaseTextBlockStyle}"  />
                </StackPanel>
              </controls:DelayedAutoTriggerButton.CenterContent>
              <i:Interaction.Behaviors>
                <i:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.HasNextVideo}" Value="True" ComparisonCondition="Equal">
                  <i:CallMethodAction MethodName="Start" />
                </i:DataTriggerBehavior>
                <i:DataTriggerBehavior Binding="{Binding VideoEndedRecommendation.IsEnded.Value}" Value="False" ComparisonCondition="Equal">
                  <i:CallMethodAction MethodName="Cancel" />
                </i:DataTriggerBehavior>
              </i:Interaction.Behaviors>
            </controls:DelayedAutoTriggerButton>
          </Border>

          <Border VerticalAlignment="Center" HorizontalAlignment="Left">
            <Button MinWidth="24" Height="120" Command="{Binding VideoPlayer.PlayPreviousCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="0 1 1 1">
              <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE016;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
            </Button>
          </Border>
          <Border VerticalAlignment="Center" HorizontalAlignment="Right">
            <Button MinWidth="24" Height="120" Command="{Binding VideoPlayer.PlayNextCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="1 1 0 1">
              <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE017;" FontSize="20" Foreground="{ThemeResource HohoemaPlayerBackgroundBrush}"></TextBlock>
            </Button>
          </Border>
        </Grid>
      </uwpControls:DockPanel>
    </Grid>
    

    <VisualStateManager.VisualStateGroups>

      <!-- デバイスごとの閉じる・最大化・小窓ボタンの表示切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsMobile}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsShowWithSecondaryViewTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowPrimaryViewButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton.Visibility" Value="Collapsed" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Collapsed" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="CloseButton.Visibility" Value="Collapsed" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Label" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Text" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsDesktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- フルスクリーン -->
      <VisualStateGroup>

        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind DefaultUIControl.Visibility, Mode=OneWay}" To="Collapsed" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsFullScreen, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>

        <!-- 幅が十分に広いとき -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_WideToMiddle}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>

        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_MiddleToNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_NallowToVeryNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlWidth, Mode=OneWay}" To="0" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- ログインしている場合に有効になるサービスを表示する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding NiconicoSession.IsLoggedIn}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 再生・停止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseButtonIcon.Symbol" Value="Pause" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- ミュートの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.IsMuted.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Mute" />
            <Setter Target="MuteToggleButton.Icon" Value="Mute" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Volume" />
            <Setter Target="MuteToggleButton.Icon" Value="Volume" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コントロールUIの自動非表示をOFFにするタイミングの制御 -->
      <!--
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind ActionsCommandBar.IsOpen, Mode=OneWay}" />
            <StateTrigger IsActive="{x:Bind NowVideoPositionChanging, Mode=OneWay}" />
            <myTrigger:CompactOverlayViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <StateTrigger IsActive="{Binding PlayerSettings.IsAutoHidePlayerControlUI, Converter={StaticResource BoolNegation}}" />
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{x:Bind CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <triggers:IsEqualStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode}" To="Controller" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerControlAutoHide.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      -->

      <!-- プレイヤーとコメントのショートカットの無効化 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{x:Bind CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="PlayPauseToggleKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoForwardKeyboardTrigger.IsEnabled" Value="False" />
            <Setter Target="VideoPreviewKeyboardTrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コメント入力中のキーボードショートカットの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{x:Bind CommentTextBox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteExitKeyboardTrigger.IsEnabled" Value="True" />
            <Setter Target="CommentSubmitKeyboardTrigger.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント書き込み中 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSubmittingComment.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentSubmittingProgressRing.IsActive" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コンパクトオーバーレイや小窓の戻るボタン表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompactOverlayViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ExitCompactOverlayButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" To="WindowInWindow" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ExitWindonwInWindowViewButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ切り替えボタンの表示・非表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsSupportCompactOverlayTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="CompactOverlayButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- Xboxで表示している場合、UI表示切り替え後のフォーカス設定を切り替える -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsShowWithSecondaryViewTrigger />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout}" To="{x:Bind models:ApplicationLayout.TV}" />
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="FocusWhenShowingControlUIAction.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- Xbox時のレイアウト調整 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlContentLayout.Padding" Value="48 0 48 27" />
            <Setter Target="UIControlHeaderLayout.Margin" Value="48 27 48 0" />
            <Setter Target="UIControlCenterLayout.Margin" Value="48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- ウィンドウタイトルバーへの対応 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" To="WindowInWindow" />
          </VisualState.StateTriggers>
        </VisualState>

        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsDesktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarMarginLayout.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>


      <!-- ニコスクリプト: シーク禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSeekDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SeekDisabledFromNicoScriptText.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: コメント禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowCommentSubmitDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.IsEnabled" Value="False" />
            <Setter Target="CommentTextBox.PlaceholderText" Value="{i18nExt:Localize Key=DisableCommentSubmitFromNicoScript}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>


      <!-- 小窓状態の時、コントローラーのショートカット操作を無効に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ConrollerHidePlayerTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekPreviewTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekForwardTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerTogglePlayPauseTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>




      <!-- コメントコマンドが未選択 -->
      <!--
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind CommandEditer.CommandString, Converter={StaticResource EmptyStringToBoolean}, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentCommandEditButton.Content"
                    Value="{i18nExt:Localize Key=CommentCommand}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      -->

    </VisualStateManager.VisualStateGroups>

  </Grid>
</UserControl>
