<Page x:Class="Hohoema.Views.Player.LivePlayerPage" 
      x:Name="PageRoot" 
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:Hohoema.Views.Player" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:i="using:Microsoft.Xaml.Interactivity" 
      xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
      xmlns:mybehavior="using:Hohoema.Views.Behaviors"
      xmlns:myTrigger="using:Hohoema.Views.StateTrigger" 
      xmlns:controls="using:Hohoema.Views.Controls" 
      xmlns:templateselector="using:Hohoema.Views.TemplateSelector" 
      xmlns:triggers="using:Microsoft.Toolkit.Uwp.UI.Triggers" 
      xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI" 
      xmlns:playerService="using:Hohoema.Contracts.Services.Player" 
      xmlns:models="using:Hohoema.Models.Application" 
      xmlns:liveToolkitWatchSession="using:NiconicoToolkit.Live.WatchSession" 
      xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
      xmlns:myExt="using:Hohoema.Views.Extensions" 
      xmlns:muxc="using:Microsoft.UI.Xaml.Controls" 
      NavigationCacheMode="Enabled" 
      DataContext="{x:Null}" 
      mc:Ignorable="d"
      d:DesignHeight="300"
      d:DesignWidth="400"
      >
  <Page.Resources>
    <MenuFlyout x:Name="LivePlayerFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PlayPauseToggleButtonTitle}" Command="{Binding TogglePlayPauseCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding ObservableMediaPlayer.IsMuted.Value, Mode=TwoWay}" Text="{i18nExt:Localize Key=Mute}" />
      <ToggleMenuFlyoutItem IsChecked="{Binding PlayerSettings.IsCommentDisplay_Live, Mode=TwoWay, Converter={StaticResource BoolNegation}}" Text="{i18nExt:Localize Key=ToggleHideComment}" />
      <MenuFlyoutSeparator />
      <!--
            <MenuFlyoutSubItem Text="画質" 
                                                               x:Name="LeoLiveQualityMenuFlyoutSubItem"
                                                               Visibility="Collapsed"
                                                               >
                <MenuFlyoutItem Text="高画質" 
                                                                Command="{Binding ChangeQualityCommand}"
                                                                CommandParameter="high"
                                                                />
                <MenuFlyoutItem Text="通常画質" 
                                                                Command="{Binding ChangeQualityCommand}"
                                                                CommandParameter="normal"
                                                                />
                <MenuFlyoutItem Text="低画質" 
                                                                Command="{Binding ChangeQualityCommand}"
                                                                CommandParameter="low"
                                                                />
                <MenuFlyoutItem Text="モバイル画質" 
                                                                Command="{Binding ChangeQualityCommand}"
                                                                CommandParameter="super_low"
                                                                />
            </MenuFlyoutSubItem>

            <MenuFlyoutSeparator Visibility="Collapsed"
                                 x:Name="LeoLiveQualityMenuFlyoutSeparator"
                                 />
            -->
      <MenuFlyoutItem x:Name="FullscreenButton_Menu" Command="{Binding PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="CompactOverlayButton_Menu" Command="{Binding PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=CompactOverlay}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="SmallWindowButton_Menu" Command="{Binding PrimaryViewPlayerManager.WindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=WindowInWindow}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="DisplayWithSecondaryViewButton_Menu" Command="{Binding TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=PlayWithSecondaryView}"></MenuFlyoutItem>
    </MenuFlyout>
    <local:PlayerSidePaneContentTemplateSelecter x:Key="PlayerSidePaneContentTemplateSelecter">
      <local:PlayerSidePaneContentTemplateSelecter.Empty>
        <DataTemplate>
          <!-- empty -->
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Empty>
      <local:PlayerSidePaneContentTemplateSelecter.Playlist>
        <DataTemplate>
          <local:PlaylistSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Playlist>
      <local:PlayerSidePaneContentTemplateSelecter.Comments>
        <DataTemplate>
          <local:LiveCommentsSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Comments>
      <local:PlayerSidePaneContentTemplateSelecter.Settings>
        <DataTemplate>
          <local:LiveSettingsSidePaneContent />
        </DataTemplate>
      </local:PlayerSidePaneContentTemplateSelecter.Settings>
    </local:PlayerSidePaneContentTemplateSelecter>
  </Page.Resources>
  <Border x:Name="LayoutRoot" Background="{ThemeResource AppBarBorderThemeBrush}" SizeChanged="LayoutRoot_SizeChanged">
    <Border x:Name="LayoutTransform">
      <SplitView PanePlacement="Right" x:Name="PlayerSplitView" IsTabStop="False" DisplayMode="Overlay" OpenPaneLength="400"
                 PaneBackground="{ThemeResource SystemControlAltHighAcrylicElementBrush}"
                 >
        <i:Interaction.Behaviors>
          <!-- サイドペインのコンテンツVMが指定されたらサイドペインを開く -->
          <!-- 条件に{x:Null}ではなく PlayerSidePaneContentType.None を指定しているのは
                         nullの場合、閉じた後のバインディングエラーによって
                         意図しない値が書き戻される可能性があるためです
                    -->
          <i:DataTriggerBehavior Binding="{Binding CurrentSidePaneContentType.Value}" ComparisonCondition="NotEqual" Value="{x:Null}">
            <i:ChangePropertyAction PropertyName="IsPaneOpen" Value="True" />
          </i:DataTriggerBehavior>
          <i:DataTriggerBehavior Binding="{Binding CurrentSidePaneContentType.Value}" ComparisonCondition="Equal" Value="{x:Null}">
            <i:ChangePropertyAction PropertyName="IsPaneOpen" Value="False" />
          </i:DataTriggerBehavior>
          <!-- サイドペインが閉じられたら コンテンツVMをリセット -->
          <i:EventTriggerBehavior EventName="PaneClosed">
            <i:ChangePropertyAction TargetObject="{Binding CurrentSidePaneContentType}" PropertyName="Value" Value="{x:Null}" />
          </i:EventTriggerBehavior>
        </i:Interaction.Behaviors>
        <SplitView.Pane>
          <uwpControls:DockPanel x:Name="PlayerSidePaneLayout">
            <ContentControl Content="{Binding CurrentSidePaneContent.Value}" ContentTemplateSelector="{StaticResource PlayerSidePaneContentTemplateSelecter}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" IsTabStop="False" />
          </uwpControls:DockPanel>
        </SplitView.Pane>
        <Grid x:Name="MediaControl" ContextFlyout="{StaticResource LivePlayerFlyout}" ManipulationMode="TranslateX">
          <i:Interaction.Behaviors>
            <!-- 左右スワイプでシーク （タイムシフト視聴時のみ有効）-->
            <mybehavior:Swipe x:Name="SeekSwipe" SwipeCommand="{Binding SeekVideoCommand}" SwipeAmountConverter="{StaticResource SwipeSeekValueToTimeSpan}" SwipeAmountScale="0.15" SwipeEdgeOfPlay="48" IsEnabled="False" />
            <!-- マウスの非表示 -->
            <mybehavior:PointerCursorAutoHideBehavior x:Name="AutoHideCursor" IsAutoHideEnabled="False" AutoHideDelay="0:0:2" />
            <mybehavior:KeyboardTrigger Key="Enter" x:Name="CommentSubmitKeyboardTrigger">
              <mybehavior:KeyboardTrigger.Actions>
                <i:InvokeCommandAction Command="{Binding CommentSubmitCommand}" />
              </mybehavior:KeyboardTrigger.Actions>
            </mybehavior:KeyboardTrigger>
            <mybehavior:KeyboardTrigger Key="Escape" x:Name="CommentWriteExitKeyboardTrigger" IsEnabled="False">
              <mybehavior:KeyboardTrigger.Actions>
                <i:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                <i:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
              </mybehavior:KeyboardTrigger.Actions>
            </mybehavior:KeyboardTrigger>
            <!-- キー入力でコメント入力開始 -->
            <mybehavior:KeyboardTrigger x:Name="CommentWriteBeginKeyboardTrigger" Key="C">
              <mybehavior:KeyboardTrigger.Actions>
                <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="True" />
                <mybehavior:SetFocus TargetObject="{x:Bind CommentTextBox}" Delay="0:0:0.10" />
              </mybehavior:KeyboardTrigger.Actions>
            </mybehavior:KeyboardTrigger>
            <mybehavior:MouseWheelTrigger>
              <mybehavior:MouseWheelTrigger.UpActions>
                <i:InvokeCommandAction Command="{Binding VolumeUpCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
              </mybehavior:MouseWheelTrigger.UpActions>
              <mybehavior:MouseWheelTrigger.DownActions>
                <i:InvokeCommandAction Command="{Binding VolumeDownCommand}" CommandParameter="{Binding PlayerSettings.SoundVolumeChangeFrequency}" />
              </mybehavior:MouseWheelTrigger.DownActions>
            </mybehavior:MouseWheelTrigger>
            <i:EventTriggerBehavior EventName="Loaded">
              <mybehavior:SetFocus TargetObject="{Binding ElementName=VolumeButton}" />
            </i:EventTriggerBehavior>
            <mybehavior:UINavigationTrigger Kind="Cancel" x:Name="ControllerToggleDisplayUITrigger" IsEnabled="True">
              <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
            </mybehavior:UINavigationTrigger>
            <mybehavior:UINavigationTrigger Kind="Cancel" Hold="True" x:Name="ControllerHold_BButtonToCloseTrigger">
              <i:InvokeCommandAction Command="{Binding PrimaryViewPlayerManager.CloseCommand}" />
            </mybehavior:UINavigationTrigger>
          </i:Interaction.Behaviors>
          <uwpControls:DockPanel>
            <Grid uwpControls:DockPanel.Dock="Top">
              <!-- 放送者コメント -->
              <controls:TransientContainer x:Name="BroadcasterPermanentCommentLayout" Content="{Binding BroadcasterLiveOperationCommand.Value, Mode=OneWay}" DisplayDuration="23:59:59" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="16" Visibility="Collapsed">
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid>
                      <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" Style="{StaticResource SubtitleTextBlockStyle}" Visibility="{Binding Hyperlink, Converter={StaticResource NullToVisibility}}"></TextBlock>
                      <HyperlinkButton NavigateUri="{Binding Hyperlink}" Visibility="{Binding Hyperlink, Converter={StaticResource NotNullToVisibility}}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0" Padding="0">
                        <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" Style="{StaticResource SubtitleTextBlockStyle}"></TextBlock>
                      </HyperlinkButton>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
            </Grid>
            <Grid uwpControls:DockPanel.Dock="Bottom">
              <!-- 運営コメント -->
              <controls:TransientContainer x:Name="OperaterAnnounceCommentLayout" Content="{Binding OperaterLiveOperationCommand.Value, Mode=OneWay}" DisplayDuration="0:0:15" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="16" Visibility="Collapsed">
                <controls:TransientContainer.ContentTemplate>
                  <DataTemplate>
                    <Grid>
                      <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" Style="{StaticResource SubtitleTextBlockStyle}" Visibility="{Binding Hyperlink, Converter={StaticResource NullToVisibility}}"></TextBlock>
                      <HyperlinkButton NavigateUri="{Binding Hyperlink}" Visibility="{Binding Hyperlink, Converter={StaticResource NotNullToVisibility}}" VerticalAlignment="Center" HorizontalAlignment="Center" BorderBrush="{ThemeResource SystemControlForegroundAccentBrush}" BorderThickness="0 0 0 1" Margin="0" Padding="0">
                        <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" Style="{StaticResource SubtitleTextBlockStyle}"></TextBlock>
                      </HyperlinkButton>
                    </Grid>
                  </DataTemplate>
                </controls:TransientContainer.ContentTemplate>
              </controls:TransientContainer>
            </Grid>
            <Grid>
              <MediaPlayerElement x:Name="MediaPlayerElement" AutoPlay="True">
                <i:Interaction.Behaviors>
                  <mybehavior:MediaPlayerSetter MediaPlayer="{Binding MediaPlayer, Mode=OneWay}" />
                  <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{Binding CommentCanvasHeight.Value, Mode=TwoWay}" />
                </i:Interaction.Behaviors>
              </MediaPlayerElement>
              <Grid uwpControls:DockPanel.Dock="Bottom">
                <!-- 記者席コメント -->
                <controls:TransientContainer x:Name="OperationPressCommentLayout" Content="{Binding PressLiveOperationCommand.Value, Mode=OneWay}" DisplayDuration="0:0:10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                  <controls:TransientContainer.ContentTemplate>
                    <DataTemplate>
                      <uwpControls:DockPanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="16">
                        <TextBlock Text="{Binding Header}" uwpControls:DockPanel.Dock="Top" Margin="0 0 0 8" Style="{StaticResource CaptionTextBlockStyle}" Opacity="0.8" />
                        <Grid>
                          <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" FontWeight="Bold" Visibility="{Binding Hyperlink, Converter={StaticResource NullToVisibility}}"></TextBlock>
                          <HyperlinkButton NavigateUri="{Binding Hyperlink}" Visibility="{Binding Hyperlink, Converter={StaticResource NotNullToVisibility}}" VerticalAlignment="Center" HorizontalAlignment="Center" BorderBrush="{ThemeResource SystemControlForegroundAccentBrush}" BorderThickness="0 0 0 1" Margin="16" Padding="0">
                            <TextBlock Text="{Binding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" TextWrapping="Wrap" MaxWidth="600" FontWeight="Bold"></TextBlock>
                          </HyperlinkButton>
                        </Grid>
                      </uwpControls:DockPanel>
                    </DataTemplate>
                  </controls:TransientContainer.ContentTemplate>
                </controls:TransientContainer>
              </Grid>
              <!-- コントロールUIを非表示に切り替える不可視のエリア -->
              <!-- コメント選択が必要になった場合に邪魔になるかも -->
              <Grid>
                <Border IsHitTestVisible="True" Background="Transparent">
                  <i:Interaction.Behaviors>
                    <i:EventTriggerBehavior EventName="Tapped">
                      <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI,Converter={StaticResource BoolNegation}, Mode=OneWay}" />
                    </i:EventTriggerBehavior>
                  </i:Interaction.Behaviors>
                </Border>
              </Grid>
            </Grid>
          </uwpControls:DockPanel>
          <Grid Height="{Binding CommentCanvasHeight.Value}">
            <local:CommentRenderer x:Name="CommentRederer" Comments="{Binding DisplayingLiveComments}" MediaPlayer="{Binding MediaPlayer, Mode=OneWay}" Visibility="{Binding PlayerSettings.IsCommentDisplay_Live, Converter={StaticResource BooleanToVisibility}}" CommentSizeScale="{Binding CommentFontScale.Value}" CommentDefaultColor="{Binding CommentDefaultColor.Value}" DefaultDisplayDuration="{Binding RequestCommentDisplayDuration.Value}" Opacity="{Binding CommentOpacity.Value, Mode=OneWay}" VideoPositionOffset="{Binding WatchStartLiveElapsedTime}" />
            <Border VerticalAlignment="Bottom" HorizontalAlignment="Left">
              <Border.Background>
                <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
              </Border.Background>
              <TextBlock Text="{Binding PermanentDisplayText.Value}" TextWrapping="Wrap" />
            </Border>
          </Grid>
          <!-- 音量表示 -->
          <controls:TransientContainer Content="{Binding ObservableMediaPlayer.SoundVolume.Value, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 96 0 0">
            <controls:TransientContainer.Background>
              <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
            </controls:TransientContainer.Background>
            <controls:TransientContainer.ContentTemplate>
              <DataTemplate>
                <Grid Margin="16 2 16 4">
                  <Border>
                    <TextBlock FontSize="20" VerticalAlignment="Center">
                      <Run Text="{i18nExt:Localize Key=SoundVolume}" />:
                      <Run Text="{Binding Converter={StaticResource ToUserFriendlySoubleVolume}}" FontSize="22" />%
                    </TextBlock>
                  </Border>
                </Grid>
              </DataTemplate>
            </controls:TransientContainer.ContentTemplate>
          </controls:TransientContainer>
          <!-- シーク表示 -->
          <controls:TransientContainer Content="{x:Bind SeekSwipe.SwipeAmount, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16" DisplayDuration="0:0:3">
            <controls:TransientContainer.Background>
              <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
            </controls:TransientContainer.Background>
            <controls:TransientContainer.ContentTemplate>
              <DataTemplate>
                <Grid Margin="16 2 16 4">
                  <Border>
                    <TextBlock FontSize="25" VerticalAlignment="Center" TextLineBounds="TrimToBaseline">
                       <Run Text="{i18nExt:Localize Key=SeekPlaybackPosition}" />: <Run Text="{Binding Converter={StaticResource TimeToMovieLengthConverter}}" /> <Run Text="{i18nExt:Localize Key=Seconds}" />
                    </TextBlock>
                  </Border>
                </Grid>
              </DataTemplate>
            </controls:TransientContainer.ContentTemplate>
          </controls:TransientContainer>
          <Grid x:Name="ControlUIRoot">
            <i:Interaction.Behaviors>
              <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" Delay="{Binding PlayerSettings.AutoHidePlayerControlUIPreventTime}" IsVisible="{x:Bind IsDisplayControlUI, Mode=TwoWay}" />
              <i:DataTriggerBehavior Binding="{x:Bind IsDisplayControlUI, Mode=OneWay}" Value="True">
                <mybehavior:SetFocus TargetObject="{Binding ElementName=PlayPauseToggleButton}" Delay="00:00:00.00" />
              </i:DataTriggerBehavior>
            </i:Interaction.Behaviors>
            <Grid x:Name="DefaultUIControl">
              <uwpControls:DockPanel>
                <StackPanel uwpControls:DockPanel.Dock="Top">
                  <Grid x:Name="TitleBarMarginLayout" Height="32" uwpControls:DockPanel.Dock="Top" Visibility="Collapsed" Background="{ThemeResource SystemAltMediumColor}">
                    <TextBlock x:Name="TitleTextBlock_Nallow" Text="{Binding LiveTitle}" Style="{ThemeResource CaptionTextBlockStyle}" Visibility="Collapsed" Margin="8" />
                  </Grid>
                  <Grid x:Name="TopBarLayout">
                    
                    <Grid.Background>
                      <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                    </Grid.Background>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                      <Button x:Name="CloseButton" Command="{Binding PrimaryViewPlayerManager.CloseCommand}" uwpControls:DockPanel.Dock="Left" UseSystemFocusVisuals="True"
                              MinWidth="48" MinHeight="48"
                              XYFocusRight="{x:Bind ActionsCommandBar}"
                              >
                        <SymbolIcon Symbol="Clear" />
                      </Button>
                      <Button x:Name="ShowPrimaryViewButton" Command="{Binding ShowPrimaryViewCommand}" Visibility="Collapsed" MinWidth="48" MinHeight="48">
                        <StackPanel Orientation="Vertical">
                          <TextBlock Text="{i18nExt:Localize Key=SwitchToMainWindow}" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
                        </StackPanel>
                      </Button>
                    </StackPanel>
                    
                    
                    <CommandBar x:Name="ActionsCommandBar" HorizontalAlignment="Right"
                                XYFocusLeft="{x:Bind CloseButton}"
                                DefaultLabelPosition="Right" 
                                >

                      <AppBarButton Label="{i18nExt:Localize Key=LiveInfomation}" Command="{Binding OpenPageCommand}" CommandParameter="{Binding LiveInfo}" />
                      <AppBarButton Label="{i18nExt:Localize Key=LiveBroadcasterInfomation}" Command="{Binding OpenContentOwnerPageCommand}" CommandParameter="{Binding LiveInfo}" />
                      <AppBarButton Label="{i18nExt:Localize Key=Share}" Icon="Link" Command="{Binding OpenShareUICommand}" CommandParameter="{Binding LiveInfo}" />
                      <AppBarButton x:Name="CopyActionsAppBarButton" Label="{i18nExt:Localize Key=Copy}" Icon="Copy">
                        <AppBarButton.Flyout>
                          <MenuFlyout>
                            <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyLiveStreamingId}" Command="{Binding CopyToClipboardCommand}" CommandParameter="{Binding LiveId}" />
                            <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyLiveStreamingLink}" Command="{Binding CopyToClipboardCommand}" CommandParameter="{Binding LiveInfo}" />
                            <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyLiveStreamingShareText}" Command="{Binding CopyToClipboardWithShareTextCommand}" CommandParameter="{Binding LiveInfo}" />
                          </MenuFlyout>
                        </AppBarButton.Flyout>
                      </AppBarButton>
                      
                      <CommandBar.SecondaryCommands>
                        <AppBarButton x:Name="FullscreenButton" Command="{Binding PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></AppBarButton>
                        <AppBarButton x:Name="CompactOverlayButton" Command="{Binding PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=CompactOverlay}"></AppBarButton>
                        <AppBarButton x:Name="SmallWindowButton" Command="{Binding PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=WindowInWindow}"></AppBarButton>
                        <AppBarButton x:Name="DisplayWithSecondaryViewButton" Command="{Binding TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Label="{i18nExt:Localize Key=PlayWithSecondaryView}"></AppBarButton>
                      </CommandBar.SecondaryCommands>
                      
                    </CommandBar>


                    <Button x:Name="ExitWindowInWindowButton" Command="{Binding PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" HorizontalAlignment="Right" Visibility="Collapsed" Margin="0 8 0 0" MinWidth="48" MinHeight="48">
                      <SymbolIcon Symbol="FullScreen" />
                    </Button>

                    <Button x:Name="ExitCompactOverlayButton" Command="{Binding PlayerView.ToggleCompactOverlayCommand}" HorizontalAlignment="Right"  Visibility="Collapsed" Margin="0 8 0 0" MinWidth="48" MinHeight="48">
                      <SymbolIcon Symbol="FullScreen" />
                    </Button>
                    
                  </Grid>
                  
                </StackPanel>
                <StackPanel uwpControls:DockPanel.Dock="Bottom" HorizontalAlignment="Stretch">
                  <StackPanel.Background>
                    <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
                  </StackPanel.Background>
                  <StackPanel x:Name="TitleLayout" Padding="8">
                    
                    <TextBlock Text="{Binding LiveTitle}" x:Name="TitleTextBlock" FontSize="24" Margin="8 0" HorizontalAlignment="Center" TextWrapping="Wrap" />
                    <i:Interaction.Behaviors>
                      <i:EventTriggerBehavior EventName="Tapped">
                        <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </i:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </StackPanel>
                  <!-- タイムシフト時のシークバー -->
                  <Border>
                    <Slider x:Name="SeekBarSlider" Minimum="0.0" Maximum="{Binding MaxSeekablePosition.Value}" Value="{Binding SeekBarTimeshiftPosition.Value, Mode=TwoWay}" Style="{StaticResource VideoProgressBarStyle}" Padding="0 0 0 16" StepFrequency="0.1" LargeChange="30" SmallChange="5" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource TimeToMovieLengthConverter}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalAlignment="Center" Opacity="0.75" Visibility="Collapsed" />
                  </Border>
                  <!-- 生放送情報 -->
                  <Border uwpControls:DockPanel.Dock="Top" x:Name="LiveInfoLayout" IsHitTestVisible="True">
                    <i:Interaction.Behaviors>
                      <i:EventTriggerBehavior EventName="Tapped">
                        <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </i:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                    <uwpControls:DockPanel>
                      <StackPanel Orientation="Horizontal" uwpControls:DockPanel.Dock="Right" Margin="16 0">
                        <!-- 来場者数・コメント数 -->
                        <StackPanel Orientation="Horizontal">
                          <SymbolIcon Symbol="View" Margin="8 0" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" />
                          <TextBlock VerticalAlignment="Center" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="0 0 8 0" FontSize="18">
                                                        <Run Text="{Binding WatchCount, Converter={StaticResource ToUserFriendlyNumber}}" /></TextBlock>
                          <SymbolIcon Symbol="Comment" Margin="8 0" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" />
                          <TextBlock VerticalAlignment="Center" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="0 0 8 0" FontSize="18">
                                                        <Run Text="{Binding CommentCount, Converter={StaticResource ToUserFriendlyNumber}}" /></TextBlock>
                        </StackPanel>
                        <!-- 放送時間 -->
                        <StackPanel Orientation="Horizontal" Margin="0">
                          <SymbolIcon Symbol="Clock" Margin="8 0" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" />
                          <TextBlock HorizontalAlignment="Right" VerticalAlignment="Center" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="0 0 24 0" FontSize="18">
                                                        <Run Text="{Binding LiveElapsedTime, Converter={StaticResource TimeToMovieLengthConverter}}" /></TextBlock>
                        </StackPanel>
                      </StackPanel>
                      <StackPanel Orientation="Vertical" uwpControls:DockPanel.Dock="Left" Margin="16 0 16 0" VerticalAlignment="Center" HorizontalAlignment="Right">
                        <!-- 画質 -->
                        <HyperlinkButton IsEnabled="{Binding CanChangeQuality.Value}">
                          <StackPanel Orientation="Horizontal" Margin="0 0 0 8" HorizontalAlignment="Right" Visibility="{Binding CurrentQuality.Value, Converter={StaticResource NotNullToVisibility}}">
                            <TextBlock VerticalAlignment="Center" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" x:Name="LeoLiveQualityTextBlock">
                                                        <Run Text="{Binding CurrentQuality.Value, Converter={StaticResource LocalizeConverter}}" /></TextBlock>
                            <TextBlock Visibility="{Binding IsLowLatency.Value, Converter={StaticResource BooleanToVisibility}}" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="8 0 0 0">
                                                        <Run Text="{i18nExt:Localize Key=LowLatency}" /></TextBlock>
                            <TextBlock Text="TS" Margin="8 0" x:Name="WatchWithTimeshiftText" Visibility="Collapsed" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" />
                          </StackPanel>
                          <i:Interaction.Behaviors>
                            <i:EventTriggerBehavior EventName="Click">
                              <mybehavior:OpenFlyout />
                              <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="True" />
                            </i:EventTriggerBehavior>
                          </i:Interaction.Behaviors>
                          <FlyoutBase.AttachedFlyout>
                            <Flyout x:Name="LiveQualityChangeFlyout">
                              <StackPanel Spacing="16">

                                <ComboBox x:Name="LiveQualityLimitComboBox" 
                                          ItemsSource="{Binding LiveAvailableLimitQualities, Mode=OneWay}" SelectedItem="{Binding QualityLimit.Value, Mode=TwoWay}" SelectionChangedTrigger="Committed" Header="{i18nExt:Localize Key=LivePlayingQualityLimit}"
                                          IsEnabled="False"
                                          Visibility="Collapsed"
                                          >
                                  <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                      <TextBlock Text="{Binding Converter={StaticResource LocalizeConverter}}" Padding="8 4" />
                                    </DataTemplate>
                                  </ComboBox.ItemTemplate>
                                </ComboBox>
                                
                                <ComboBox ItemsSource="{Binding LiveAvailableQualities, Mode=OneWay}" SelectedItem="{Binding RequestQuality.Value, Mode=TwoWay}" SelectionChangedTrigger="Committed" Header="{i18nExt:Localize Key=LivePlayingQuality}">
                                  <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                      <TextBlock Text="{Binding Converter={StaticResource LocalizeConverter}}" Padding="8 4" />
                                    </DataTemplate>
                                  </ComboBox.ItemTemplate>
                                </ComboBox>

                                <ToggleSwitch IsOn="{Binding IsLowLatency.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Header="{i18nExt:Localize Key=LowLatency}"></ToggleSwitch>

                              </StackPanel>

                            </Flyout>
                          </FlyoutBase.AttachedFlyout>
                        </HyperlinkButton>
                      </StackPanel>
                      <Border />
                    </uwpControls:DockPanel>
                  </Border>
                  <!-- 再生コントロール -->
                  <Grid Padding="8" x:Name="PlaybackControlLayout">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation="Horizontal" Spacing="8">
                      <!-- 音量 -->
                      <Button UseSystemFocusVisuals="True" MinWidth="48" MinHeight="48">
                        <SymbolIcon Symbol="Mute" x:Name="VolumeButtonIcon" />
                        <Button.Flyout>
                          <Flyout>
                            <uwpControls:DockPanel uwpControls:DockPanel.Dock="Right" Margin="0 0 16 0" Height="66">
                              <StackPanel Background="#AA777777" uwpControls:DockPanel.Dock="Left">
                                <AppBarButton Icon="Volume" Label="{i18nExt:Localize Key=Mute}" VerticalAlignment="Stretch" x:Name="MuteToggleButton" Command="{Binding ToggleMuteCommand}"></AppBarButton>
                              </StackPanel>
                              <StackPanel Margin="8 0" Orientation="Vertical">
                                <Slider x:Name="VolumeSlider" Orientation="Horizontal" VerticalAlignment="Top" Margin="8 4" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}" Maximum="1.0" Minimum="0.0" StepFrequency="0.01" SmallChange="0.01" LargeChange="0.1" Height="32" Width="160" Background="Transparent"></Slider>
                                <TextBlock Text="{i18nExt:Localize Key=SoundVolume}" VerticalAlignment="Center" Margin="8 0 0 0" HorizontalAlignment="Center" FontSize="12" />
                              </StackPanel>
                            </uwpControls:DockPanel>
                          </Flyout>
                        </Button.Flyout>
                      </Button>
                      <Button MinWidth="48" MinHeight="48">
                        <Grid>
                          <SymbolIcon Symbol="Comment" x:Name="CommentIcon" Width="18" Height="18" />
                          <Canvas>
                            <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="3" Visibility="{Binding PlayerSettings.IsCommentDisplay_Live, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                          </Canvas>
                        </Grid>
                        <i:Interaction.Behaviors>
                          <i:EventTriggerBehavior EventName="Click">
                            <i:ChangePropertyAction TargetObject="{Binding PlayerSettings}" PropertyName="IsCommentDisplay_Live" Value="{Binding PlayerSettings.IsCommentDisplay_Live, Converter={StaticResource BoolNegation}}" />
                          </i:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                      </Button>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" x:Name="MiddleUIControlLayout" Grid.Column="1" Spacing="16">
                      <Button x:Name="PreviewVideoPositionButon" Command="{Binding SeekVideoCommand}" CommandParameter="{x:Bind PreviewSeekTime}" Visibility="Collapsed" MinWidth="48" MinHeight="48">
                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" FontSize="24" />
                      </Button>
                      <Button x:Name="PlayPauseToggleButton" Command="{Binding TogglePlayPauseCommand}" VerticalAlignment="Stretch" Visibility="Collapsed" Opacity="1.0" MinWidth="48" MinHeight="48">
                        <SymbolIcon x:Name="PlayPauseButtonIcon" Symbol="Play" Width="24" Height="24" Opacity="1.0" />
                      </Button>
                      <Button x:Name="ForwardVideoPositionButon" Command="{Binding SeekVideoCommand}" CommandParameter="{x:Bind ForwardSeekTime}" Visibility="Collapsed" MinWidth="48" MinHeight="48">
                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;" FontSize="24" />
                      </Button>
                    </StackPanel>
                    
                    <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" Spacing="8">
                      <!-- コメントリスト表示切替 -->
                      <Button x:Name="OpenCommentListButton" Command="{Binding ToggleCommentListSidePaneContentCommand}" MinWidth="48" MinHeight="48">
                        <SymbolIcon Symbol="Comment" />
                      </Button>
                      <Button x:Name="OpenSettingsButton" MinWidth="48" MinHeight="48">
                        <SymbolIcon Symbol="Setting" />

                        <Button.Flyout>
                          <Flyout>
                            <Flyout.FlyoutPresenterStyle>
                              <Style TargetType="FlyoutPresenter">
                                <Setter Property="Padding" Value="0 27 48 0" />
                              </Style>
                            </Flyout.FlyoutPresenterStyle>
                            <local:LiveSettingsSidePaneContent />
                          </Flyout>
                        </Button.Flyout>
                      </Button>
                    </StackPanel>
                  </Grid>
                  <!-- Comment関連 -->
                  <!-- コメントを書く -->
                  <Grid x:Name="CommentLayout">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                      <ColumnDefinition Width="1*" />
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="CommentTextBox" Text="{Binding CommentSubmitText.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource BGTransparentTextBoxStyle}" FontSize="18" VerticalAlignment="Center" MaxLength="75" IsTabStop="True" PlaceholderText="コメント" HorizontalAlignment="Stretch" Margin="8 0 8 8" HorizontalContentAlignment="Stretch" Height="40" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="4">
                      <i:Interaction.Behaviors>
                        <!-- コメントの書き込み-->
                        <mybehavior:KeyboardTrigger Key="Enter" OnlyWhenFocus="{x:Bind CommentTextBox}">
                          <mybehavior:KeyboardTrigger.Actions>
                            <i:InvokeCommandAction Command="{Binding CommentSubmitCommand}" CommandParameter="{x:Bind CommentTextBox.Text, Mode=OneWay}" />
                          </mybehavior:KeyboardTrigger.Actions>
                        </mybehavior:KeyboardTrigger>
                        <mybehavior:KeyboardTrigger Key="Escape" OnlyWhenFocus="{x:Bind CommentTextBox}">
                          <mybehavior:KeyboardTrigger.Actions>
                            <mybehavior:SetFocus TargetObject="{x:Bind PlayPauseToggleButton}" />
                          </mybehavior:KeyboardTrigger.Actions>
                        </mybehavior:KeyboardTrigger>
                        <i:EventTriggerBehavior EventName="GotFocus">
                          <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="NowCommentEditting" Value="True" />
                          <i:CallMethodAction TargetObject="{x:Bind CommentTextBox}" MethodName="SelectAll" />
                        </i:EventTriggerBehavior>
                        <i:EventTriggerBehavior EventName="LostFocus">
                          <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="NowCommentEditting" Value="False" />
                        </i:EventTriggerBehavior>
                      </i:Interaction.Behaviors>
                    </TextBox>
                    <Button Content="{Binding CommentCommandEditerViewModel.CommandsText.Value, Mode=OneWay}" Margin="0 0 8 8" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" DataContext="{Binding}" x:Name="CommentCommandEditButton" Height="40" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="1">
                      <Button.Flyout>
                        <Flyout x:Name="CommandEditerFlyout">
                          <local:CommentCommandEditer x:Name="CommandEditer" DataContext="{Binding CommentCommandEditerViewModel}" />
                        </Flyout>
                      </Button.Flyout>
                    </Button>
                    <Button x:Name="CommentSubmitButton" Content="{i18nExt:Localize Key=SubmitComment}" Margin="8 0 0 8" Height="40" Command="{Binding CommentSubmitCommand}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="5" Grid.ColumnSpan="1" />
                    <Border Grid.ColumnSpan="6" Grid.RowSpan="2" x:Name="WhenTimeshiftIgnoreCommentLayout" Visibility="Collapsed">
                      <Border.Background>
                        <SolidColorBrush Color="{ThemeResource SystemAltLowColor}" />
                      </Border.Background>
                      <TextBlock Text="{i18nExt:Localize Key=DisallowCommentInTimeshift}" Margin="8" TextWrapping="Wrap" Opacity="0.9" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                  </Grid>
                </StackPanel>
                <Grid x:Name="ControlUICenter" IsHitTestVisible="True" Background="Transparent">
                  <i:Interaction.Behaviors>
                    <i:EventTriggerBehavior EventName="Tapped">
                      <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                    </i:EventTriggerBehavior>
                  </i:Interaction.Behaviors>

                  <Border x:Name="CenterTopGradient" Height="32" VerticalAlignment="Top">
                    <Border.Background>
                      <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                        <GradientStop x:Name="CenterTopGradientStop_End" Color="Transparent" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
                      </LinearGradientBrush>
                    </Border.Background>
                    <i:Interaction.Behaviors>
                      <i:EventTriggerBehavior EventName="Tapped">
                        <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </i:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>

                  <Border x:Name="CenterBottomGradient" Height="32" VerticalAlignment="Bottom">
                    <Border.RenderTransform>
                      <TranslateTransform Y="0.2" />
                    </Border.RenderTransform>
                    <Border.Background>
                      <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                        <GradientStop x:Name="CenterBottomGradientStop_End" Color="Transparent" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
                      </LinearGradientBrush>
                    </Border.Background>
                    <i:Interaction.Behaviors>
                      <i:EventTriggerBehavior EventName="Tapped">
                        <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="False" />
                      </i:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                  </Border>
                </Grid>
              </uwpControls:DockPanel>
            </Grid>
          </Grid>
          <Grid Visibility="{x:Bind IsDisplayControlUI, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}">
            <Border IsHitTestVisible="True" Background="Transparent">
              <i:Interaction.Behaviors>
                <i:EventTriggerBehavior EventName="Tapped">
                  <i:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayControlUI" Value="{x:Bind IsDisplayControlUI,Converter={StaticResource BoolNegation}, Mode=OneWay}" />
                </i:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
          </Grid>
          <Border Margin="16 96 0 0" Visibility="{Binding HasSuggestion.Value, Converter={StaticResource BooleanToVisibility}}" Background="{ThemeResource AppBarItemBackgroundThemeBrush}" VerticalAlignment="Top" HorizontalAlignment="Left" BorderBrush="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" BorderThickness="1" Padding="16">
            <StackPanel>
              <TextBlock Text="{Binding Suggestion.Value.Title}" FontSize="18" />
              <ItemsControl ItemsSource="{Binding Suggestion.Value.Actions}" Margin="0 16 0 0">
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <Button Command="{Binding SuggestActionCommand}" Margin="0 0 0 8" Padding="16 8">
                      <uwpControls:DockPanel>
                        <TextBlock Text="{Binding Label}" MaxWidth="240" MinWidth="120" TextWrapping="Wrap" FontSize="18" />
                        <SymbolIcon Symbol="Forward" Margin="16 0 0 0" />
                      </uwpControls:DockPanel>
                    </Button>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>
            </StackPanel>
          </Border>

          <muxc:ProgressRing x:Name="BufferingProgressRing" Visibility="{Binding NowRefreshing.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" IsActive="{Binding NowRefreshing.Value, Mode=OneWay}" MinWidth="64" MinHeight="64" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
      </SplitView>
    </Border>
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding CurrentPlayerDisplayView.Value}" To="SecondaryView" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout}" To="{x:Bind models:ApplicationLayout.TV}" />
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CopyActionsAppBarButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>
        <!-- 幅が十分に広いとき -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlActualWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_WideToMiddle}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>

        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlActualWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_MiddleToNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlActualWidth, Mode=OneWay}" To="{StaticResource WidthBreakPoint_NallowToVeryNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />
            
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControlActualWidth, Mode=OneWay}" To="0" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            
            <Setter Target="ActionsCommandBar.Visibility" Value="Collapsed" />
            
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenCommentListButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsButton.Visibility" Value="Collapsed" />

            <Setter Target="ControlUICenter.Background" Value="{ThemeResource SystemAltMediumColor}" />

            <Setter Target="ExitCompactOverlayButton.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ActionsCommandBar.Visibility" Value="Collapsed" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenCommentListButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsButton.Visibility" Value="Collapsed" />

            <Setter Target="ControlUICenter.Background" Value="{ThemeResource SystemAltMediumColor}" />

            <Setter Target="ExitWindowInWindowButton.Visibility" Value="Visible" />
            
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <!-- コントロールUIの自動非表示をOFFにするタイミングの制御 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <!-- Target="{x:Bind CommentTextBox}" と指定すると動作しない -->
            <StateTrigger IsActive="{x:Bind NowCommentEditting, Mode=OneWay}" />
            <StateTrigger IsActive="{x:Bind ActionsCommandBar.IsOpen, Mode=OneWay}" />
            <StateTrigger IsActive="{x:Bind NowVideoPositionChanging, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay}" />
            <StateTrigger IsActive="{Binding PlayerSettings.IsAutoHidePlayerControlUI, Converter={StaticResource BoolNegation}}" />
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}" />
            <triggers:IsEqualStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode}" To="Controller" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=LiveQualityChangeFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerControlAutoHide.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 読み込み中表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ObservableMediaPlayer.NowBuffering.Value}" />
            <StateTrigger IsActive="{Binding NowRefreshing.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="BufferingProgressRing.IsActive"
                    Value="True" />
            <Setter Target="BufferingProgressRing.Visibility"
                    Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 再生状態に対するUI表示 -->
      <VisualStateGroup>
        <!-- 再生中 -->
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseToggleButton.Visibility" Value="Visible" />
            <Setter Target="PlayPauseButtonIcon.Symbol" Value="Pause" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding IsTimeshift}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseToggleButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <!-- 再生中 -->
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseToggleButton.Visibility" Value="Visible" />
            <Setter Target="PlayPauseButtonIcon.Symbol" Value="Play" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- タイムシフト時の表示の切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding IsTimeshift, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
        </VisualState>
        <!-- タイムシフト時かつ画面サイズが小さい場合 -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:CompareStateTrigger Value="{x:Bind MediaControl.ActualWidth, Mode=OneWay}"
                                          To="{StaticResource WidthBreakPoint_NallowToVeryNallow}"
                                          Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Collapsed" />
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="WatchWithTimeshiftText.Visibility" Value="Visible" />
            <Setter Target="SeekBarSlider.Visibility" Value="Visible" />
            <Setter Target="SeekSwipe.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding IsTimeshift, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Collapsed" />
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Visible" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Visible" />
            <Setter Target="WatchWithTimeshiftText.Visibility" Value="Visible" />
            <Setter Target="SeekBarSlider.Visibility" Value="Visible" />
            <Setter Target="SeekSwipe.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 自動画質の時だけ、画質上限のUIを表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding CurrentQuality.Value}" To="{x:Bind liveToolkitWatchSession:LiveQualityType.Abr}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="LiveQualityLimitComboBox.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- キーボード入力によるコメント書き込みショートカットの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <!-- Target="{x:Bind CommentTextBox}" と指定すると動作しない -->
            <StateTrigger IsActive="{x:Bind NowCommentEditting, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding ElementName=PlayerSplitView, Path=IsPaneOpen}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}"/>
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardTrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント送信中のテキスト入力防止 -->
      <!--
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding NowCommentSubmitting.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      -->
      <!-- ミュートの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.IsMuted.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButtonIcon.Symbol"
                    Value="Mute" />
            <Setter Target="MuteToggleButton.Icon"
                    Value="Mute" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButtonIcon.Symbol"
                    Value="Volume" />
            <Setter Target="MuteToggleButton.Icon"
                    Value="Volume" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- 小窓表示 -->
      <!-- コンパクトオーバーレイ表示中のコントロールUI切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{x:Bind PageRoot}"/>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.OpenPaneLength" Value="80" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ切り替えボタンの表示・非表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsSupportCompactOverlayTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="CompactOverlayButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleTextBlock.Opacity" Value="0.6" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- プラットフォーム -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout, Mode=OneWay}" To="{x:Bind models:ApplicationLayout.TV}" />
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleLayout.Padding" Value="48 0" />
            <Setter Target="TopBarLayout.Padding" Value="48 27 48 0" />
            <Setter Target="CommentLayout.Padding" Value="48 8 48 27" />
            <Setter Target="PlaybackControlLayout.Padding" Value="48 8" />
            <Setter Target="LiveInfoLayout.Padding" Value="48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- デバイスごとの最大化と小窓ボタンの表示切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsMobile}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />

            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsXbox}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding CurrentPlayerDisplayView.Value}" To="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowPrimaryViewButton.Visibility" Value="Visible" />
            <Setter Target="CloseButton.Visibility" Value="Collapsed" />

            <Setter Target="SmallWindowButton.Visibility" Value="Collapsed" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Collapsed" />

            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />

            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Label" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Text" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />

          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsDesktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>

            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />

          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- フルスクリーン -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsFullScreen}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{StaticResource DeviceType_IsDesktop}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarMarginLayout.Visibility" Value="Visible" />
            <Setter Target="PlayerSidePaneLayout.Margin" Value="0 32 0 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsNotEqualStateTrigger Value="{Binding BroadcasterLiveOperationCommand.Value}" To="{x:Null}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="BroadcasterPermanentCommentLayout.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsNotEqualStateTrigger Value="{Binding OperaterLiveOperationCommand.Value}" To="{x:Null}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="OperaterAnnounceCommentLayout.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コメントリスト サイドペイン -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay}" />
            <triggers:IsEqualStateTrigger Value="{Binding PrimaryViewPlayerManager.DisplayMode}" To="{x:Bind playerService:PlayerDisplayMode.WindowInWindow}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="BroadcasterPermanentCommentLayout.Padding" Value="2" />
            <Setter Target="OperaterAnnounceCommentLayout.Padding" Value="2" />
          </VisualState.Setters>
        </VisualState>
        <!-- ウィンドウサイズが520pxより小さい場合は
                     サイドペイン DisplayMode = Overlay -->
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:ControlSizeTrigger MaxWidth="800" MinWidth="0" TargetElement="{x:Bind PageRoot}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.DisplayMode" Value="Overlay" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:EqualConditionStateTrigger Condition="Comment" Value="{Binding CurrentSidePaneContentType.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerSplitView.DisplayMode" Value="Inline" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Border>
</Page>
