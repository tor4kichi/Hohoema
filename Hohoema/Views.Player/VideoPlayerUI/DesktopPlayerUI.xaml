<UserControl
  x:Class="Hohoema.Views.Player.VideoPlayerUI.DesktopPlayerUI"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="using:Hohoema.Views.Player.VideoPlayerUI"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"   
  xmlns:i="using:Microsoft.Xaml.Interactivity"
  xmlns:core="using:Microsoft.Xaml.Interactions.Core"
  xmlns:uwpControls="using:Microsoft.Toolkit.Uwp.UI.Controls"
  xmlns:mybehavior="using:Hohoema.Views.Behaviors"
  xmlns:viewmodel="using:Hohoema.ViewModels"
  xmlns:sidepaneVM="using:Hohoema.ViewModels.Player.PlayerSidePaneContent"
  xmlns:playerView="using:Hohoema.Views.Player"
  xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
  xmlns:connectivityTrigger="using:AdaptiveTriggerLibrary.Triggers.ConnectivityTriggers"
  xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
  xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
  xmlns:myTrigger="using:Hohoema.Views.StateTrigger"
  xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
  xmlns:media="using:Microsoft.Xaml.Interactions.Media"
  xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI"
  xmlns:iconPack="using:MahApps.Metro.IconPacks"
  xmlns:model="using:Hohoema.Models"
  xmlns:models="using:Hohoema.Models.Application"
  xmlns:controls="using:Hohoema.Views.Controls"
  xmlns:templateselector="using:Hohoema.Views.TemplateSelector"
  xmlns:windowsTriggers="using:WindowsStateTriggers" 
  xmlns:players="using:Hohoema.Views.Player"
  xmlns:animation="using:Microsoft.Toolkit.Uwp.UI.Animations"
  xmlns:i18nExt="using:I18NPortable.Xaml.Extensions"
  xmlns:myExt="using:Hohoema.Views.Extensions" 
  xmlns:winui="using:Microsoft.UI.Xaml.Controls" xmlns:ui="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:nico="using:Hohoema.Models.Niconico.Video"
  x:Name="RootLayout"
  mc:Ignorable="d"
    d:DesignHeight="300"
    d:DesignWidth="400"  
  >

  <UserControl.Resources>

    <Style TargetType="Button">
      <Setter Property="MinWidth" Value="48" />
      <Setter Property="MinHeight" Value="48" />
    </Style>
    <Style TargetType="ToggleButton">
      <Setter Property="MinWidth" Value="48" />
      <Setter Property="MinHeight" Value="48" />
    </Style>

    <Style TargetType="CommandBar">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="DefaultLabelPosition" Value="Right" />
    </Style>

    <local:VideoQualityListItemContainerStyleSelector x:Key="VideoQualityListItemContainerStyleSelector">
      <local:VideoQualityListItemContainerStyleSelector.AvairableQuality>
        <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemExpanded}">

        </Style>
      </local:VideoQualityListItemContainerStyleSelector.AvairableQuality>
      <local:VideoQualityListItemContainerStyleSelector.UnavairableQuality>
        <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemExpanded}">
          <Setter Property="IsEnabled" Value="False" />
        </Style>
      </local:VideoQualityListItemContainerStyleSelector.UnavairableQuality>
    </local:VideoQualityListItemContainerStyleSelector>

    <MenuFlyout x:Key="VideoOptionsFlyout">
      <MenuFlyoutItem Text="{i18nExt:Localize Key=PlayPauseToggleButtonTitle}" Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{x:Bind _vm.ObservableMediaPlayer.IsMuted.Value, Mode=OneWay}" Text="{i18nExt:Localize Key=Mute}" Command="{x:Bind _vm.ToggleMuteCommand}" />
      <ToggleMenuFlyoutItem IsChecked="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=TwoWay, Converter={StaticResource BoolNegation}}" Text="{i18nExt:Localize Key=ToggleHideComment}" />
      <MenuFlyoutSubItem Text="{i18nExt:Localize Key=Quality}" Visibility="{x:Bind _vm.AvailableQualities, Converter={StaticResource CollectionVisibilityConverter}, Mode=OneWay}" x:Name="VideoQualityMenuFlyoutSubImte">
        <i:Interaction.Behaviors>
          <mybehavior:MenuFlyoutSubItemItemsSetter ItemsSource="{x:Bind _vm.AvailableQualities, Mode=OneWay}" CustomObjectToTag="{x:Bind _vm}">
            <mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
              <DataTemplate x:DataType="nico:NicoVideoQualityEntity">
                <MenuFlyoutItem IsEnabled="{Binding IsAvailable}" Text="{x:Bind ToString()}" Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.ChangeVideoQualityCommand}" CommandParameter="{Binding}" />
              </DataTemplate>
            </mybehavior:MenuFlyoutSubItemItemsSetter.ItemTemplate>
          </mybehavior:MenuFlyoutSubItemItemsSetter>
        </i:Interaction.Behaviors>
      </MenuFlyoutSubItem>
      <MenuFlyoutSubItem Text="{i18nExt:Localize Key=PlaybackRate}">
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="200%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>2.0</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="175%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="150%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="125%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>1.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutSeparator />
        <MenuFlyoutItem Text="75%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.75</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="50%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.5</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
        <MenuFlyoutItem Text="25%" Command="{x:Bind _vm.SetPlaybackRateCommand}">
          <MenuFlyoutItem.CommandParameter>
            <x:Double>0.25</x:Double>
          </MenuFlyoutItem.CommandParameter>
        </MenuFlyoutItem>
      </MenuFlyoutSubItem>
      <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlayRepeat}" IsChecked="{x:Bind _vm.IsLoopingEnabled.Value, Mode=TwoWay}">
        <ToggleMenuFlyoutItem.Icon>
          <iconPack:PathIconMaterial Kind="Repeat" />
        </ToggleMenuFlyoutItem.Icon>
      </ToggleMenuFlyoutItem>
      <MenuFlyoutSeparator />
      <MenuFlyoutItem x:Name="FullscreenButton_Menu" Command="{x:Bind _vm.PlayerView.ToggleFullScreenCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=FullScreen}" Icon="FullScreen"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="CompactOverlayButton_Menu" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=CompactOverlay}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="SmallWindowButton_Menu" Command="{x:Bind _vm.PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=WindowInWindow}"></MenuFlyoutItem>
      <MenuFlyoutItem x:Name="DisplayWithSecondaryViewButton_Menu" Command="{x:Bind _vm.TogglePlayerDisplayViewCommand}" Background="Transparent" Visibility="Collapsed" MinWidth="64" Text="{i18nExt:Localize Key=PlayWithSecondaryView}"></MenuFlyoutItem>
    </MenuFlyout>
  </UserControl.Resources>
  <Grid x:Name="UIControlLayout"         
        ManipulationMode="TranslateX"
        SizeChanged="MediaControl_SizeChanged"
        KeyboardAcceleratorPlacementMode="Hidden"
        >

    <Grid.KeyboardAccelerators>
      <!-- KeyboardAccelerator.IsEnabledが初期設定されていないとVisualStateのデフォルト状態に遷移した際の値の戻しが行われない -->
      <KeyboardAccelerator x:Name="CommentWriteBeginKeyboardAccelerator" Key="C" IsEnabled="True">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <core:CallMethodAction TargetObject="{x:Bind}" MethodName="ShowControlUI" />
            <mybehavior:SetFocus TargetObject="{x:Bind CommentTextBox}" Delay="0:0:0.10" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>

      <KeyboardAccelerator x:Name="CommentWriteExitKeyboardAccelerator" Key="Escape" IsEnabled="False">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <mybehavior:SetFocus TargetObject="{x:Bind PlayPauseButton}" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>

      <KeyboardAccelerator x:Name="CommentSubmitKeyboardAccelerator" Key="Enter" IsEnabled="False">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <core:InvokeCommandAction Command="{x:Bind _vm.CommentPlayer.CommentSubmitCommand}" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>

      <!-- スペースキー入力で再生停止の切り替え-->
      <KeyboardAccelerator x:Name="PlayPauseToggleKeyboardAccelerator" Key="Space" IsEnabled="True">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <core:InvokeCommandAction Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>

      <KeyboardAccelerator x:Name="VideoForwardKeyboardAccelerator" Key="Right" IsEnabled="True">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}"  />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>
      <KeyboardAccelerator x:Name="VideoBackKeyboardAccelerator" Key="Left" IsEnabled="True">
        <i:Interaction.Behaviors>
          <core:EventTriggerBehavior EventName="Invoked">
            <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
          </core:EventTriggerBehavior>
        </i:Interaction.Behaviors>
      </KeyboardAccelerator>
    </Grid.KeyboardAccelerators>
    <i:Interaction.Behaviors>

      <!-- スペースキー入力で再生停止の切り替え-->
      <mybehavior:MouseWheelTrigger>
        <mybehavior:MouseWheelTrigger.UpActions>
          <core:InvokeCommandAction Command="{x:Bind _vm.VolumeUpCommand}" CommandParameter="{x:Bind _vm.PlayerSettings.SoundVolumeChangeFrequency, Mode=OneWay}" />
        </mybehavior:MouseWheelTrigger.UpActions>
        <mybehavior:MouseWheelTrigger.DownActions>
          <core:InvokeCommandAction Command="{x:Bind _vm.VolumeDownCommand}" CommandParameter="{x:Bind _vm.PlayerSettings.SoundVolumeChangeFrequency, Mode=OneWay}" />
        </mybehavior:MouseWheelTrigger.DownActions>
      </mybehavior:MouseWheelTrigger>
      <mybehavior:UINavigationTrigger Kind="Cancel" x:Name="ControllerToggleDisplayUITrigger" IsEnabled="True">
        <core:CallMethodAction TargetObject="{x:Bind}" MethodName="ToggleControlUI" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ConrollerHidePlayerTrigger" Kind="Cancel" Hold="True" IsEnabled="True">
        <core:InvokeCommandAction Command="{x:Bind _vm.PrimaryViewPlayerManager.CloseCommand}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerSeekPreviewTrigger" Kind="PageLeft" IsEnabled="True">
        <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerSeekForwardTrigger" Kind="PageRight" IsEnabled="True">
        <core:InvokeCommandAction Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger x:Name="ControllerTogglePlayPauseTrigger" Kind="Context1" IsEnabled="True">
        <core:InvokeCommandAction Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" />
      </mybehavior:UINavigationTrigger>
      <mybehavior:UINavigationTrigger Kind="Menu">
        <mybehavior:OpenFlyout TargetFlyout="{StaticResource VideoOptionsFlyout}" ShowAt="{x:Bind UIControlLayout}"/>
      </mybehavior:UINavigationTrigger>

      <!-- 再生停止時にUIを表示 -->
      <core:DataTriggerBehavior Binding="{x:Bind _vm.ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay}" Value="False" ComparisonCondition="Equal">
        <core:CallMethodAction TargetObject="{x:Bind}" MethodName="ShowControlUI" />
      </core:DataTriggerBehavior>
      <core:DataTriggerBehavior Binding="{x:Bind _vm.ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay}" Value="True" ComparisonCondition="Equal">
        <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
      </core:DataTriggerBehavior>

      <!-- UI表示時に再生ボタンにフォーカス -->
      <core:DataTriggerBehavior Binding="{x:Bind IsVisibleUI, Mode=OneWay}" Value="True">
        <mybehavior:SetFocus x:Name="FocusWhenShowingControlUIAction" TargetObject="{Binding ElementName=PlayPauseButton}" Delay="00:00:00" IsEnabled="False" />
      </core:DataTriggerBehavior>

      <!-- 左右スワイプでシーク -->
      <mybehavior:Swipe x:Name="SeekSwipe" SwipeCommand="{x:Bind _vm.SeekCommand}" SwipeAmountConverter="{StaticResource SwipeSeekValueToTimeSpan}" SwipeAmountScale="0.15" SwipeEdgeOfPlay="48"
                        IsEnabled="{x:Bind NowVideoPositionChanging, Mode=OneWay, Converter={StaticResource BoolNegation}}"
                        />

      <!-- マウスの非表示 -->
      <mybehavior:PointerCursorAutoHideBehavior x:Name="AutoHideCursor" IsAutoHideEnabled="False" AutoHideDelay="0:0:1" />
      
      <core:EventTriggerBehavior EventName="Loaded">
        <mybehavior:SetFocus TargetObject="{x:Bind RootLayout}" />
      </core:EventTriggerBehavior>
      
    </i:Interaction.Behaviors>

    <!-- 読み込み中表示 -->
    <winui:ProgressRing Visibility="{x:Bind _vm.ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" IsActive="{x:Bind _vm.ObservableMediaPlayer.NowBuffering.Value, Mode=OneWay}" Width="64" Height="64" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.9" IsTabStop="False" />
   
    <!-- UI非表示時の再生位置バー -->
    <Slider 
      x:Name="ReadOnlySeekBarSlider"
      Value="{x:Bind SeekBarSlider.Value, Mode=OneWay}"
      Maximum="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}"
      HorizontalAlignment="Stretch" VerticalAlignment="Bottom" 
      IsEnabled="False" 
      Opacity="0.6"
      >
      <Slider.RenderTransform>
        <TranslateTransform Y="8" />
      </Slider.RenderTransform>
    </Slider>
    
    
    <!-- プレイヤー内の通知表示 -->
    <StackPanel>
      <!-- 音量表示 -->
      <controls:TransientContainer Content="{Binding SoundVolumeManager.Volume, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 80 0 0">
        <controls:TransientContainer.Background>
          <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
        </controls:TransientContainer.Background>
        <controls:TransientContainer.ContentTemplate>
          <DataTemplate>
            <Grid Margin="16 2 16 4">
              <Border>
                <TextBlock FontSize="20" VerticalAlignment="Center">
                          <Run Text="{i18nExt:Localize Key=SoundVolume}" />:
                          <Run Text="{Binding Converter={StaticResource ToUserFriendlySoubleVolume}}" FontSize="22" />%
                </TextBlock>
              </Border>
            </Grid>
          </DataTemplate>
        </controls:TransientContainer.ContentTemplate>
      </controls:TransientContainer>
      <controls:TransientContainer Content="{x:Bind SeekSwipe.SwipeAmount, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16" DisplayDuration="0:0:3">
        <controls:TransientContainer.Background>
          <SolidColorBrush Color="{ThemeResource SystemAltMediumColor}" />
        </controls:TransientContainer.Background>
        <controls:TransientContainer.ContentTemplate>
          <DataTemplate>
            <Grid Margin="16 2 16 4">
              <Border>
                <TextBlock FontSize="25" VerticalAlignment="Center" TextLineBounds="TrimToBaseline">
                           <Run Text="{i18nExt:Localize Key=SeekPlaybackPosition}" />: <Run Text="{Binding Converter={StaticResource TimeToMovieLengthConverter}}" /> <Run Text="{i18nExt:Localize Key=Seconds}" />
                </TextBlock>
              </Border>
            </Grid>
          </DataTemplate>
        </controls:TransientContainer.ContentTemplate>
      </controls:TransientContainer>
      
    </StackPanel>

    <Grid x:Name="DefaultUIControl">
      <i:Interaction.Behaviors>
        <!-- UIのフェードイン・アウト管理 -->
        <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" Delay="{x:Bind _vm.PlayerSettings.AutoHidePlayerControlUIPreventTime, Mode=OneWay}" IsVisible="{x:Bind IsVisibleUI, Mode=TwoWay}" />
      </i:Interaction.Behaviors>

      <uwpControls:DockPanel >

        
        <!-- 上側 プレイリスト 操作 -->
        <Grid uwpControls:DockPanel.Dock="Top" Background="{StaticResource HohoemaPlayerBackgroundBrush}">

          <uwpControls:DockPanel x:Name="UIControlHeaderLayout" >

            <Panel.Resources>
              <Style TargetType="SymbolIcon">
                <Setter Property="RenderTransform">
                  <Setter.Value>
                    <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <Setter Property="Opacity" Value="0.7" />
              </Style>
              <Style TargetType="iconPack:PackIconMaterial">
                <Setter Property="RenderTransform">
                  <Setter.Value>
                    <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <Setter Property="Opacity" Value="0.7" />
              </Style>
              <Style TargetType="Button">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="ToolTipService.Placement" Value="Bottom" />
              </Style>
            </Panel.Resources>

            <!-- Title Bar Margin -->
            <TextBlock x:Name="TitleTextBlock_Nallow" Text="{x:Bind _vm.VideoInfo.Title, Mode=OneWay}" Style="{ThemeResource CaptionTextBlockStyle}" Visibility="Collapsed" Margin="8" uwpControls:DockPanel.Dock="Top" />

            <!-- Secondary window TitleBar margin -->
            <Border x:Name="SecondaryWindowTopMarginBorder" Height="32" uwpControls:DockPanel.Dock="Top" Visibility="Collapsed" />
            
            
            
            <!-- 左上 -->
            <StackPanel Orientation="Horizontal" uwpControls:DockPanel.Dock="Left">
              <!-- 閉じる -->
              <Button x:Name="CloseButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.CloseCommand}" UseSystemFocusVisuals="True" MinWidth="64" MinHeight="64"                                
                      XYFocusDown="{x:Bind LikeToggleButton}"
                      ToolTipService.ToolTip="{i18nExt:Localize Key=Close}"
                      ToolTipService.Placement="Bottom"
                      VerticalAlignment="Top"
                            >
                <SymbolIcon Symbol="Clear" />
              </Button>

              <!-- メインウィンドウ表示 -->
              <Button x:Name="ShowPrimaryViewButton" Command="{x:Bind _vm.ShowPrimaryViewCommand}" Visibility="Collapsed" MinWidth="48" MinHeight="32">
                <StackPanel Orientation="Vertical">
                  <TextBlock Text="{i18nExt:Localize Key=SwitchToMainWindow}" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
                </StackPanel>
              </Button>
            </StackPanel>


            <!-- タイトルバーに表示する画面関連操作 -->
            <Grid x:Name="TitleBarWindowControlUI" uwpControls:DockPanel.Dock="Right" VerticalAlignment="Top" Visibility="{x:Bind IsVisibleUI, Converter={StaticResource BooleanToVisibility}}">
              <StackPanel x:Name="TitleBarWindowActionsPanel" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0 0 188 0" VerticalAlignment="Top" Height="32">
                <StackPanel.Resources>
                  <Style TargetType="iconPack:PackIconMaterial">
                    <Setter Property="RenderTransform">
                      <Setter.Value>
                        <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
                      </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                    <Setter Property="Opacity" Value="0.7" />
                  </Style>
                  <Style TargetType="Button">
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="ToolTipService.Placement" Value="Bottom" />
                    
                  </Style>
                </StackPanel.Resources>
                <Button x:Name="FullscreenButton" Command="{x:Bind _vm.PlayerView.ToggleFullScreenCommand}" Visibility="Collapsed" MinHeight="32" MinWidth="48" ToolTipService.ToolTip="{i18nExt:Localize Key=FullScreen}">
                  <iconPack:PackIconMaterial Kind="Fullscreen" />
                </Button>
                <Button x:Name="CompactOverlayButton" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Visibility="Collapsed" MinHeight="32" MinWidth="48" ToolTipService.ToolTip="{i18nExt:Localize Key=CompactOverlay}">
                  <iconPack:PackIconMaterial Kind="OpenInNew" />
                </Button>
                <Button x:Name="SmallWindowButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.ToggleFillOrWindowInWindowCommand}" Visibility="Collapsed" MinHeight="32" MinWidth="48" ToolTipService.ToolTip="{i18nExt:Localize Key=WindowInWindow}">
                  <iconPack:PackIconMaterial Kind="ArrowBottomRight" />
                </Button>
              </StackPanel>
              <Border x:Name="TitleBarWindowSeparator" Background="{ThemeResource AppBarSeparatorForegroundThemeBrush}" Margin="0 6 158 6" Width="1" HorizontalAlignment="Right" Opacity="0.4" VerticalAlignment="Top" />
            </Grid>


            <!-- 右上 -->                     
            <Button x:Name="ExitWindonwInWindowViewButton" Command="{x:Bind _vm.PrimaryViewPlayerManager.ShowWithFillCommand}" Background="Transparent" Visibility="Collapsed" uwpControls:DockPanel.Dock="Top" Margin="0 0 0 0" MinWidth="48" MinHeight="48" HorizontalAlignment="Right">
              <SymbolIcon Symbol="FullScreen" />
            </Button>
            <Button x:Name="ExitCompactOverlayButton" Command="{x:Bind _vm.PlayerView.ToggleCompactOverlayCommand}" Background="Transparent" Visibility="Collapsed" uwpControls:DockPanel.Dock="Top" Margin="0 0 100 0" MinWidth="48" MinHeight="32" HorizontalAlignment="Right">
              <SymbolIcon Symbol="FullScreen" />
            </Button>

            <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
          </uwpControls:DockPanel>
        </Grid>

        <!-- 下側 動画コンテンツ 操作 -->
        <StackPanel x:Name="UIControlContentLayout" uwpControls:DockPanel.Dock="Bottom" Background="{StaticResource HohoemaPlayerBackgroundBrush}" Padding="0 0 0 8">
          
          <!-- Title -->
          <uwpControls:DockPanel>
            <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0" uwpControls:DockPanel.Dock="Left">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
            <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0" uwpControls:DockPanel.Dock="Right">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
            <uwpControls:DockPanel Margin="32 0" HorizontalAlignment="Center">

              <ToggleButton x:Name="LikeToggleButton" ToolTipService.ToolTip="{i18nExt:Localize Key=NicoLike}" IsChecked="{x:Bind _vm.LikesContext.IsLikes, Mode=TwoWay}" IsEnabled="{Binding LikesContext.NowLikeProcessing, Mode=OneWay, Converter={StaticResource BoolNegation}}" Visibility="Collapsed" 
                        Background="Transparent" Height="48"    
                            uwpControls:DockPanel.Dock="Left"
                        >
                <ToggleButton.Content>
                  <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{i18nExt:Localize Key=NicoLike}" />
                  </StackPanel>
                </ToggleButton.Content>
              </ToggleButton>
              <DropDownButton Background="Transparent" MinHeight="48">
                <DropDownButton.Flyout>
                  <MenuFlyout>

                    <MenuFlyoutItem x:Name="ShowVideoInfoButon" Text="{i18nExt:Localize Key=VideoInfomation}" Command="{x:Bind _vm.OpenVideoInfoCommand}" />

                    <MenuFlyoutSubItem x:Name="AddToMenuFlyout" Icon="Add" Text="{i18nExt:Localize Key=Add}">
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=MylistAddItem}" Command="{x:Bind _vm.AddMylistCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=LocalMylistAddItem}" Command="{x:Bind _vm.LocalPlaylistAddItemCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscriptionAddUserVideos}" Command="{x:Bind _vm.AddSubscriptionCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=SubscriptionAddSeries}" Command="{x:Bind _vm.AddSubscriptionCommand}" CommandParameter="{x:Bind _vm.VideoSeries, Mode=OneWay}"
                                Visibility="{x:Bind _vm.VideoSeries, Mode=OneWay, Converter={StaticResource NotNullToBoolean}}"
                                />

                    </MenuFlyoutSubItem>
                    <MenuFlyoutSubItem Icon="Share" Text="{i18nExt:Localize Key=Share}">
                      <MenuFlyoutItem x:Name="ShareButton" Text="{i18nExt:Localize Key=Share}" Icon="Link" Visibility="Collapsed" Command="{x:Bind _vm.OpenShareUICommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"></MenuFlyoutItem>
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyVideoId}" Command="{x:Bind _vm.CopyToClipboardCommand}" CommandParameter="{x:Bind _vm.VideoId, Mode=OneWay}" />
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyVideoLink}" Command="{x:Bind _vm.CopyToClipboardCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                      <MenuFlyoutItem Text="{i18nExt:Localize Key=CopyShareText}" Command="{x:Bind _vm.CopyToClipboardWithShareTextCommand}" CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}" />
                    </MenuFlyoutSubItem>
                    <MenuFlyoutItem Icon="List" Text="{i18nExt:Localize Key=RelatedInfomation}" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="RelatedVideos" />
                  </MenuFlyout>
                </DropDownButton.Flyout>

                <TextBlock x:Name="TitleTextBlock" Text="{x:Bind _vm.VideoInfo.Title, Mode=OneWay}" FontSize="20" TextWrapping="Wrap"                           
                           MaxWidth="720"
                           MaxLines="3"
                           TextAlignment="Center"
                           />

              </DropDownButton>
            </uwpControls:DockPanel>
          </uwpControls:DockPanel>
          <!-- シークバー -->
          <Grid Margin="0 0 0 0">
            <TextBlock x:Name="SeekDisabledFromNicoScriptText" Text="{i18nExt:Localize Key=DisableSeekFromNicoScript}" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Center" Opacity="0.6" />
            <Slider x:Name="SeekBarSlider" Minimum="0.0" Maximum="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeSpanToDoubleConverter}}" Style="{StaticResource VideoProgressBarStyle}" Padding="0 16 0 8" StepFrequency="0.1" LargeChange="30" SmallChange="5" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource TimeToMovieLengthConverter}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalAlignment="Center" Opacity="0.75" Margin="8 0" />

          </Grid>
          <!-- 動画画質 -->
          <Grid x:Name="VideoProps" Margin="0 0 8 8">
            <!-- 画質と動画プロバイダーオリジン -->
            <StackPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Orientation="Horizontal" Margin="0 0 16 0" Spacing="8">
              <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{Binding NowPlayingWithCache, Converter={StaticResource BooleanToVisibility}}"
                         VerticalAlignment="Center"
                         >
                            <Run Text="{x:Bind _vm.CurrentQuality.Quality, Mode=OneWay, Converter={StaticResource LocalizeConverter}}" />
              </TextBlock>
              <HyperlinkButton Opacity="1" Padding="16 8">
                <TextBlock Visibility="{Binding NowPlayingWithCache, Converter={StaticResource BooleanToVisibilityInverted}}"
                           Text="{x:Bind _vm.CurrentQuality.Label, Mode=OneWay}"
                           />
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Click">
                    <mybehavior:OpenFlyout />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <FlyoutBase.AttachedFlyout>
                  <MenuFlyout x:Name="ChangeQualityMenuFlyout" Placement="TopEdgeAlignedLeft" Opened="ChangeQualityMenuFlyout_Opening">
                    <i:Interaction.Behaviors>
                      <mybehavior:MenuFlyoutItemsSetter ItemsSource="{x:Bind _vm.AvailableQualities, Mode=OneWay}" CustomObjectToTag="{x:Bind _vm}">
                        <mybehavior:MenuFlyoutItemsSetter.ItemTemplate>
                          <DataTemplate x:DataType="nico:NicoVideoQualityEntity">
                            <!-- コードビハインドで IsChecked を設定してる -->
                            <ToggleMenuFlyoutItem IsEnabled="{Binding IsAvailable}" Text="{x:Bind ToString()}" Command="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag.ChangeVideoQualityCommand}" CommandParameter="{Binding}" />
                          </DataTemplate>
                        </mybehavior:MenuFlyoutItemsSetter.ItemTemplate>
                      </mybehavior:MenuFlyoutItemsSetter>
                    </i:Interaction.Behaviors>
                  </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
              </HyperlinkButton>
              <TextBlock Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Visibility="{x:Bind _vm.NowPlayingWithCache, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}"
                         VerticalAlignment="Center"
                         >
                                                        (<Run Text="{i18nExt:Localize Key=VideoPlayWithCached}" />)
              </TextBlock>
            </StackPanel>

            <!-- 動画位置と再生速度倍率 -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Spacing="8">
              <iconPack:PathIconMaterial Kind="Repeat" Visibility="{x:Bind _vm.IsLoopingEnabled.Value, Mode=OneWay}" Opacity="0.8">
                <iconPack:PathIconMaterial.RenderTransform>
                  <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.65" ScaleY="0.65" />
                </iconPack:PathIconMaterial.RenderTransform>
              </iconPack:PathIconMaterial>
              <TextBlock VerticalAlignment="Center" IsHitTestVisible="False" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}" Margin="0 0 0 0">
                <Run Text="{x:Bind VideoPosition, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" />
                <Run Text="/" />
                <Run Text="{x:Bind _vm.VideoInfo.Length, Mode=OneWay, Converter={StaticResource TimeToMovieLengthConverter}}" />
              </TextBlock>
              <HyperlinkButton Padding="16 8" VerticalAlignment="Bottom" Opacity="0.7" MinWidth="36" HorizontalAlignment="Right">
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Click">
                    <mybehavior:OpenFlyout />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <FlyoutBase.AttachedFlyout>
                  <MenuFlyout Placement="TopEdgeAlignedRight">
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=0.25}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 0.25), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>0.25</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=0.5}" Command="{x:Bind _vm.SetPlaybackRateCommand}" 
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 0.5), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>0.5</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=0.75}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 0.75), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>0.75</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_Default}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 1.0), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>1.0</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=1.25}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 1.25), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>1.25</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=1.5}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 1.5), Mode=OneWay}"
                      >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>1.5</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=1.75}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                      IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 1.75), Mode=OneWay}"
                      >      
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>1.75</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                    <ToggleMenuFlyoutItem Text="{i18nExt:Localize Key=PlaybackRate_WithRate, Param1=2.0}" Command="{x:Bind _vm.SetPlaybackRateCommand}"
                                          IsChecked="{x:Bind IsSamePlaybackRate(_vm.ObservableMediaPlayer.PlaybackRate.Value, 2.0), Mode=OneWay}"
                                          >
                      <ToggleMenuFlyoutItem.CommandParameter>
                        <x:Double>2</x:Double>
                      </ToggleMenuFlyoutItem.CommandParameter>
                    </ToggleMenuFlyoutItem>
                  </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <TextBlock VerticalAlignment="Center">x<Run Text="{x:Bind _vm.ObservableMediaPlayer.PlaybackRate.Value, Mode=OneWay}" /></TextBlock>
              </HyperlinkButton>
            </StackPanel>
          </Grid>
          <!-- ボタン類 -->
          <Grid Padding="8 0 8 0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal" Spacing="8">
              <!-- コメント表示切替 -->
              <Button x:Name="CommentDisplayControlLayout" MinWidth="48" MinHeight="48" ClickMode="Release">
                <Grid>
                  <iconPack:PackIconMaterial Kind="Comment" x:Name="CommentIcon" Width="20" Height="20" />
                  <Canvas>
                    <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" Y1="0" X2="0" Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}" Stroke="Red" StrokeThickness="4" Visibility="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=OneWay, Converter={StaticResource BooleanToVisibilityInverted}}" Opacity="0.7" />
                  </Canvas>
                </Grid>
                <i:Interaction.Behaviors>
                  <core:EventTriggerBehavior EventName="Click">
                    <core:ChangePropertyAction TargetObject="{Binding PlayerSettings}" PropertyName="IsCommentDisplay_Video" Value="{x:Bind _vm.PlayerSettings.IsCommentDisplay_Video, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
                  </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
              </Button>
              <!-- 音量 -->
              <Button x:Name="VolumeControlLayout" MinWidth="48" MinHeight="48" ToolTipService.ToolTip="{i18nExt:Localize Key=Mute}"
                      Command="{x:Bind _vm.ToggleMuteCommand}"
                      >
                <SymbolIcon x:Name="VolumeButton" Symbol="Mute" />
              </Button>
              <Slider x:Name="VolumeSlider" Orientation="Horizontal" VerticalAlignment="Center" IsThumbToolTipEnabled="True" ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}" Maximum="1.0" Minimum="0.0" StepFrequency="0.01" SmallChange="0.05" LargeChange="0.1" Height="32" Width="120" ValueChanged="VolumeSlider_ValueChanged" HorizontalAlignment="Right" TabIndex="-1"
                      ToolTipService.ToolTip="{i18nExt:Localize Key=SoundVolume}"
                      Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                      
                      />
              
            </StackPanel>
            <!-- 再生切り替え・シーク -->
            <StackPanel Orientation="Horizontal" Grid.Column="1" Spacing="16">
              <Button x:Name="PreviewVideoPositionButon" Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind PreviewSeekTime}" MinWidth="48" MinHeight="48">
                <Grid>
                  <TextBlock FontFamily="Segoe MDL2 Assets"
                             Text="&#xED3C;"
                             FontSize="24"
                             Height="12"
                             Margin="0 0 0 16"/>
                  <Grid VerticalAlignment="Bottom"
                        HorizontalAlignment="Stretch">
                    <TextBlock Text="{x:Bind ForwardSeekTime.TotalSeconds}" FontSize="15" HorizontalAlignment="Center" />
                  </Grid>
                </Grid>
              </Button>
              <Button x:Name="PlayPauseButton" Command="{x:Bind _vm.VideoTogglePlayPauseCommand}" Margin="0 0 0 0" MinWidth="48" MinHeight="48">
                <iconPack:PackIconMaterial Kind="Play" x:Name="PlayPauseButtonIcon" RenderTransformOrigin="0.5, 0.5">
                  <iconPack:PackIconMaterial.RenderTransform>
                    <CompositeTransform ScaleX="1.35" ScaleY="1.35" />
                  </iconPack:PackIconMaterial.RenderTransform>
                </iconPack:PackIconMaterial>
              </Button>
              <Button x:Name="ForwardVideoPositionButon" Command="{x:Bind _vm.SeekCommand}" CommandParameter="{x:Bind ForwardSeekTime}" MinWidth="48" MinHeight="48">
                <Grid>
                  <TextBlock FontFamily="Segoe MDL2 Assets"
                             Text="&#xED3D;"
                             FontSize="24"
                             Height="12"
                             Margin="0 0 0 16" />
                  <Grid VerticalAlignment="Bottom"
                        HorizontalAlignment="Stretch">
                    <TextBlock Text="{x:Bind ForwardSeekTime.TotalSeconds}"
                               FontSize="15"
                               HorizontalAlignment="Center" />
                  </Grid>
                </Grid>

              </Button>
            </StackPanel>
            <!-- Settings etc -->
            <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center" Spacing="8">
              <Button x:Name="OpenCommentListButton" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="Comment" MinWidth="48" MinHeight="48">
                <iconPack:PackIconMaterial Kind="Comment" Width="24" Height="24"></iconPack:PackIconMaterial>
              </Button>
              <Button x:Name="OpenPlaylistButton" Command="{x:Bind _vm.SelectSidePaneCommand}" CommandParameter="Playlist" MinWidth="48" MinHeight="48" Visibility="{x:Bind _vm.CurrentPlaylist, Mode=OneWay, Converter={StaticResource NotNullToVisibility}}">
                <iconPack:PackIconMaterial Kind="PlaylistPlay" Width="24" Height="24"></iconPack:PackIconMaterial>
              </Button>
              <Button x:Name="OpenSettingsPaneButton" MinWidth="48" MinHeight="48">
                <Button.Flyout>
                  <Flyout>
                    <Flyout.FlyoutPresenterStyle>
                      <Style TargetType="FlyoutPresenter">
                        <Setter Property="Padding" Value="0 27 48 0" />
                      </Style>
                    </Flyout.FlyoutPresenterStyle>

                    <players:VideoSettingsSidePaneContent />
                  </Flyout>
                </Button.Flyout>

                <Button.Content>
                  <SymbolIcon Symbol="Setting" />
                </Button.Content>
              </Button>
            </StackPanel>
          </Grid>
          <!-- コメントを書く -->
          <Grid x:Name="CommentLayout" Padding="0 8 0 0" Visibility="Collapsed">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
              <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <TextBox x:Name="CommentTextBox" Text="{x:Bind _vm.CommentPlayer.WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FontSize="18" VerticalAlignment="Center" MaxLength="75" IsTabStop="True" PlaceholderText="{i18nExt:Localize Key=CommentTextBoxPlacefolder}" HorizontalAlignment="Stretch" Margin="8 0 8 0" HorizontalContentAlignment="Stretch" Height="40" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="4" IsEnabled="{x:Bind _vm.CommentPlayer.NowCommentSubmitDisabledFromNicoScript, Mode=OneWay, Converter={StaticResource BoolNegation}}"                   
                   >
              <TextBox.Style>
                <Style TargetType="TextBox">
                </Style>
              </TextBox.Style>
              <i:Interaction.Behaviors>
                <!-- Release で実行すると失敗するので使えない -->
                <!--
              <core:EventTriggerBehavior EventName="GotFocus">
                <core:ChangePropertyAction TargetObject="{x:Bind RootLayout}" PropertyName="NowCommentEditting" Value="True" />
              </core:EventTriggerBehavior>
              <core:EventTriggerBehavior EventName="LostFocus">
                <core:ChangePropertyAction TargetObject="{x:Bind RootLayout}" PropertyName="NowCommentEditting" Value="False" />
              </core:EventTriggerBehavior>
              <core:EventTriggerBehavior EventName="GotFocus">
                <core:CallMethodAction TargetObject="{x:Bind CommentTextBox}" MethodName="SelectAll" />
              </core:EventTriggerBehavior>
              -->
              </i:Interaction.Behaviors>
            </TextBox>
            <Button x:Name="CommentCommandEditButton"
                            Content="{x:Bind _vm.CommentCommandEditerViewModel.CommandsText.Value, Mode=OneWay}"                            
                            Margin="8 0 8 0" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" DataContext="{x:Bind _vm}" Height="40" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="1">
              <Button.Flyout>
                <Flyout x:Name="CommandEditerFlyout">
                  <players:CommentCommandEditer x:Name="CommandEditer" DataContext="{x:Bind _vm.CommentCommandEditerViewModel, Mode=OneWay}" />
                </Flyout>
              </Button.Flyout>

              <i:Interaction.Behaviors>
                <core:DataTriggerBehavior Binding="{x:Bind _vm.CommentCommandEditerViewModel.CommandsText.Value, Mode=OneWay}" Value="{x:Null}" ComparisonCondition="NotEqual">
                  <core:ChangePropertyAction TargetObject="{Binding CommentPlayer.CommandText}" PropertyName="Value" Value="{Binding CommentCommandEditerViewModel.CommandsText.Value}" />
                </core:DataTriggerBehavior>
              </i:Interaction.Behaviors>
            </Button>
            <Button x:Name="CommentSubmitButton" Margin="8 0 8 0" Height="40" Command="{x:Bind _vm.CommentPlayer.CommentSubmitCommand}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" UseSystemFocusVisuals="True" Grid.RowSpan="2" Grid.Column="5" Grid.ColumnSpan="1">
              <Grid>
                <TextBlock Text="{i18nExt:Localize Key=SubmitComment}" />
                <ProgressRing x:Name="CommentSubmittingProgressRing" IsActive="False" Height="24" Width="24" VerticalAlignment="Center" />
              </Grid>
            </Button>
          </Grid>
        </StackPanel>
        <!-- 中央 余白とリコメンド -->
        <Grid x:Name="UIControlCenterLayout" BorderThickness="0" ContextFlyout="{StaticResource VideoOptionsFlyout}">
          <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
            <i:Interaction.Behaviors>
              <core:EventTriggerBehavior EventName="Tapped">
                <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
              </core:EventTriggerBehavior>
            </i:Interaction.Behaviors>
          </Border>
          <Border x:Name="PlayEndedRecommendContainer" Visibility="Collapsed">
            <controls:DelayedAutoTriggerButton x:Name="PlayEndedRecommend" Command="{x:Bind _vm.VideoEndedRecommendation.PlayNextVideoCommand}" CancelCommand="{Binding VideoEndedRecommendation.CanceledNextPartMoveCommand}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="40 0" IsAutoTriggerEnabled="{x:Bind _vm.PlayerSettings.AutoMoveNextVideoOnPlaylistEmpty, Mode=OneWay}">
              <controls:DelayedAutoTriggerButton.CenterContent>
                <StackPanel Spacing="4">
                  <TextBlock Text="{i18nExt:Localize Key=RecommendedNextVideo}" Opacity="0.7" />
                  <TextBlock x:Name="RecommendVideoTitle" Text="{x:Bind _vm.VideoEndedRecommendation.NextVideoTitle, Mode=OneWay}" Style="{StaticResource BaseTextBlockStyle}"  />
                </StackPanel>
              </controls:DelayedAutoTriggerButton.CenterContent>
              <i:Interaction.Behaviors>
                <core:DataTriggerBehavior Binding="{x:Bind _vm.VideoEndedRecommendation.HasNextVideo, Mode=OneWay}" Value="True" ComparisonCondition="Equal">
                  <core:CallMethodAction MethodName="Start" />
                </core:DataTriggerBehavior>
                <core:DataTriggerBehavior Binding="{x:Bind _vm.VideoEndedRecommendation.IsEnded.Value, Mode=OneWay}" Value="False" ComparisonCondition="Equal">
                  <core:CallMethodAction MethodName="Cancel" />
                </core:DataTriggerBehavior>
              </i:Interaction.Behaviors>
            </controls:DelayedAutoTriggerButton>
          </Border>
          <Border x:Name="CenterTopGradient" Height="32" VerticalAlignment="Top" >
            <Border.Background>
              <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                <!-- Color set in code behind -->
                <GradientStop x:Name="CenterTopGradientStop_End" Color="Transparent" Offset="0.0" />
                <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
              </LinearGradientBrush>
            </Border.Background>
            <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
          </Border>
          <Border x:Name="CenterBottomGradient" Height="32" BorderThickness="0" VerticalAlignment="Bottom" >
            <Border.Background>
              <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                <GradientStop x:Name="CenterBottomGradientStop_End" Color="Transparent" Offset="0.0" />
                <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
              </LinearGradientBrush>
            </Border.Background>
            <Border.RenderTransform>
              <TranslateTransform Y="0.20" />
            </Border.RenderTransform>
            <Border IsHitTestVisible="True" Background="Transparent" BorderThickness="0">
              <i:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Tapped">
                  <core:CallMethodAction TargetObject="{x:Bind}" MethodName="HideControlUI" />
                </core:EventTriggerBehavior>
              </i:Interaction.Behaviors>
            </Border>
          </Border>
          <Border x:Name="GoPrevVideoLayout" VerticalAlignment="Center" HorizontalAlignment="Left">
            <Button MinWidth="24" Height="120" Command="{x:Bind _vm.PlayPreviousCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="0 1 1 1"
                    ToolTipService.Placement="Right"
                    >
              <ToolTipService.ToolTip>
                <StackPanel MaxWidth="240">
                  <Image Source="{x:Bind _vm.PrevVideoContent.ThumbnailUrl, Mode=OneWay}" Width="180" />
                  <TextBlock Text="{x:Bind _vm.PrevVideoContent.Title, Mode=OneWay}" TextWrapping="Wrap" MaxLines="3" />
                </StackPanel>
              </ToolTipService.ToolTip>
              <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE016;" FontSize="20" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"></TextBlock>
            </Button>
          </Border>
          <Border x:Name="GoNextVideoLayout" VerticalAlignment="Center" HorizontalAlignment="Right">
            <Button MinWidth="24" Height="120" Command="{x:Bind _vm.PlayNextCommand}" BorderBrush="{StaticResource HohoemaPlayerBackgroundBrush}" BorderThickness="1 1 0 1"
                    ToolTipService.Placement="Left"
                    >
              <ToolTipService.ToolTip>
                <StackPanel MaxWidth="240">
                  <Image Source="{x:Bind _vm.NextVideoContent.ThumbnailUrl, Mode=OneWay}" Width="180" />
                  <TextBlock Text="{x:Bind _vm.NextVideoContent.Title, Mode=OneWay}" TextWrapping="Wrap" MaxLines="3" />
                </StackPanel>
              </ToolTipService.ToolTip>
              <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE017;" FontSize="20" Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"></TextBlock>
            </Button>
          </Border>
        </Grid>
      </uwpControls:DockPanel>
      
     
    </Grid>
    

    <Grid>
      <!-- 有料動画・サポートされていないプロトコル・動画形式・チャンネル会員限定動画・プレミアム会員限定動画 -->
      <Border HorizontalAlignment="Left" VerticalAlignment="Top" Margin="32 64" Visibility="{x:Bind _vm.IsNotSupportVideoType, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}" Background="{StaticResource AppBarItemPointerOverBackgroundThemeBrush}" Padding="16">
        <Grid MinWidth="300">
          <iconPack:PackIconMaterial Kind="VideoOff" Margin="16 8 32 8" Width="32" Height="32" uwpControls:DockPanel.Dock="Left" VerticalAlignment="Center" />
          <StackPanel Spacing="16" HorizontalAlignment="Right">
            <TextBlock Text="{i18nExt:Localize Key=CanNotPlay}" VerticalAlignment="Center" Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 0 0 0" />
            <TextBlock VerticalAlignment="Center" TextWrapping="Wrap" HorizontalAlignment="Right" >
                        <Run Text="{x:Bind _vm.CannotPlayReason, Mode=OneWay}" />
            </TextBlock>
            <Button Content="{i18nExt:Localize Key=OpenWithBrowser}"
                            Command="{x:Bind _vm.OpenLinkCommand}" 
                            CommandParameter="{x:Bind _vm.VideoInfo, Mode=OneWay}"
                            Style="{ThemeResource AccentButtonStyle}" 
                            Height="48"
                            HorizontalAlignment="Right"
                            />
          </StackPanel>
        </Grid>
      </Border>
    </Grid>
    
    <Grid IsHitTestVisible="{x:Bind IsVisibleUI, Mode=OneWay, Converter={StaticResource BoolNegation}}" Background="Transparent" Margin="0 0 0 0"
          ContextFlyout="{StaticResource VideoOptionsFlyout}"
          >
      <i:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Tapped">
          <core:CallMethodAction TargetObject="{x:Bind}" MethodName="ShowControlUI" />
        </core:EventTriggerBehavior>
      </i:Interaction.Behaviors>
    </Grid>

    <Border x:Name="PlayerTopDraggableArea_Compact" IsHitTestVisible="True" VerticalAlignment="Top" Height="32" Background="Transparent" Margin="48 0 148 0" />
    <Border x:Name="PlayerTopDraggableArea_FullScreen" IsHitTestVisible="True" VerticalAlignment="Top" Height="32" Background="Transparent" Margin="80 0 340 0" />
    <Border x:Name="PlayerTopDraggableArea_FillWindow" IsHitTestVisible="True" VerticalAlignment="Top" Height="32" Background="Transparent" Margin="64 0 340 0" />

    <VisualStateManager.VisualStateGroups>

      <!-- デバイスごとの閉じる・最大化・小窓ボタンの表示切り替え -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Mobile" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowPrimaryViewButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton.Visibility" Value="Collapsed" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Collapsed" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <Setter Target="CloseButton.Visibility" Value="Collapsed" />
            <!--
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton.Label" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
            -->
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Text" Value="{i18nExt:Localize Key=PlayWithPrimaryView}" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Desktop" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SmallWindowButton.Visibility" Value="Visible" />
            <Setter Target="SmallWindowButton_Menu.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton.Visibility" Value="Visible" />
            <Setter Target="FullscreenButton_Menu.Visibility" Value="Visible" />
            <!--
            <Setter Target="DisplayWithSecondaryViewButton.Visibility" Value="Visible" />
            -->
            <Setter Target="DisplayWithSecondaryViewButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- カーソルの自動非表示を無効にするタイミング -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding ElementName=IsVisibleUI, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}"/>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
            <StateTrigger IsActive="{x:Bind _vm.ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay, Converter={StaticResource BoolNegation}}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="AutoHideCursor.IsAutoHideEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 画面サイズごとの表示・非表示に切り替え -->
      <VisualStateGroup>

        <!-- 幅が十分に広いとき -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{Binding ElementName=MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_WideToMiddle}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
          </VisualState.Setters>
        </VisualState>

        <!-- 中ぐらい -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{Binding ElementName=MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_MiddleToNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
          </VisualState.Setters>
        </VisualState>
        <!-- 超狭い -->
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{Binding ElementName=MediaControlWidth, Mode=OneWay}" CompareTo="{StaticResource WidthBreakPoint_NallowToVeryNallow}" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />
            
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:CompareStateTrigger Value="{Binding ElementName=MediaControlWidth, Mode=OneWay}" CompareTo="0" Comparison="GreaterThan" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />
            <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentTextBox.(Grid.Column)" Value="0" />
            <Setter Target="CommentTextBox.(Grid.ColumnSpan)" Value="6" />
            <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
            <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
            <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
            <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />

            <Setter Target="TitleTextBlock.Visibility" Value="Collapsed" />
            <Setter Target="TitleTextBlock_Nallow.Visibility" Value="Visible" />
            
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- ログインしている場合に有効になるサービスを表示する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding NiconicoSession.IsLoggedIn}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentLayout.Visibility" Value="Visible" />
            <Setter Target="LikeToggleButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- インターネット接続状態による表示切替 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <connectivityTrigger:NetworkConnectionStateTrigger Condition="InternetAccess" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ShowVideoInfoButon.Visibility" Value="Visible" />
            <Setter Target="ShareButton.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>


      <!-- 再生・停止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.ObservableMediaPlayer.NowPlaying.Value, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayPauseButtonIcon.Kind" Value="Pause" />
            <Setter Target="TitleTextBlock.Opacity" Value="0.7" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- ミュートの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind _vm.ObservableMediaPlayer.IsMuted.Value, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Mute" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="VolumeButton.Symbol" Value="Volume" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コントロールUIの自動非表示をOFFにするタイミングの制御 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind NowVideoPositionChanging, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <StateTrigger IsActive="{Binding PlayerSettings.IsAutoHidePlayerControlUI, Converter={StaticResource BoolNegation}}" />
            <StateTrigger IsActive="{Binding ObservableMediaPlayer.NowPlaying.Value, Converter={StaticResource BoolNegation}}" />
            <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode}" EqualTo="Controller" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="PlayerControlAutoHide.IsAutoHideEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <!-- ウィンドウ非アクティブ時にマウス移動に反応するエリアを拡大する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowActiveTrigger Inverted="True" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- シークバー表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsVisibleUI, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <!-- 読み取り再生位置スライダーの表示状態 -->
            <Setter Target="ReadOnlySeekBarSlider.Opacity" Value="0.0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- プレイヤーとコメントのショートカットの無効化 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
            <StateTrigger IsActive="{Binding PlayerSplitViewIsPaneOpen, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
            <myTrigger:FlyoutIsOpenStateTrigger TargetFlyout="{Binding ElementName=CommandEditerFlyout}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteBeginKeyboardAccelerator.IsEnabled" Value="False" />
            <Setter Target="PlayPauseToggleKeyboardAccelerator.IsEnabled" Value="False" />

            <Setter Target="VideoForwardKeyboardAccelerator.IsEnabled" Value="False" />
            <Setter Target="VideoBackKeyboardAccelerator.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コメント入力中のキーボードショートカットの有効・無効 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentWriteExitKeyboardAccelerator.IsEnabled" Value="True" />
            <Setter Target="CommentSubmitKeyboardAccelerator.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コメント書き込み中 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSubmittingComment.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentSubmittingProgressRing.IsActive" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- コンパクトオーバーレイや小窓の戻るボタン表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="OpenPlaylistButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsPaneButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenCommentListButton.Visibility" Value="Collapsed" />
           
            <Setter Target="VolumeControlLayout.Visibility" Value="Collapsed" />
            <Setter Target="VideoProps.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />

            <Setter Target="ExitCompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="SeekBarSlider.Visibility" Value="Collapsed" />
            
            <Setter Target="TitleBarWindowControlUI.Visibility" Value="Collapsed" />
            <Setter Target="CloseButton.MinWidth" Value="48" />
            <Setter Target="CloseButton.MinHeight" Value="32" />
            <Setter Target="TitleTextBlock.FontSize" Value="14" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding PrimaryViewPlayerManager.DisplayMode, Mode=OneWay}" EqualTo="WindowInWindow" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="OpenPlaylistButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenSettingsPaneButton.Visibility" Value="Collapsed" />
            <Setter Target="OpenCommentListButton.Visibility" Value="Collapsed" />
            <Setter Target="VolumeControlLayout.Visibility" Value="Collapsed" />
            <Setter Target="VideoProps.Visibility" Value="Collapsed" />
            <Setter Target="CommentCommandEditButton.Visibility" Value="Collapsed" />
            <Setter Target="CommentSubmitButton.Visibility" Value="Collapsed" />

            <Setter Target="ExitWindonwInWindowViewButton.Visibility" Value="Visible" />
            <Setter Target="SeekBarSlider.Visibility" Value="Collapsed" />

            <Setter Target="TitleBarWindowControlUI.Visibility" Value="Collapsed" />
            <Setter Target="CloseButton.MinWidth" Value="48" />
            <Setter Target="CloseButton.MinHeight" Value="32" />
            <Setter Target="TitleTextBlock.FontSize" Value="14" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <!-- ウィンドウ操作UI -->      
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarWindowActionsPanel.Margin" Value="0 0 0 0" />
            <Setter Target="ExitCompactOverlayButton.Margin" Value="0 16 100 0" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode}" EqualTo="Touch" />
            <windowsTriggers:EqualsStateTrigger Value="{Binding SidePaneType}" EqualTo="Playlist" />
            <windowsTriggers:EqualsStateTrigger Value="{Binding SidePaneType}" EqualTo="Comment" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarWindowActionsPanel.Margin" Value="0 32 0 0" />
            <Setter Target="PlayerTopDraggableArea_FillWindow.Margin" Value="80 0 48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- コンパクトオーバーレイ切り替えボタンの表示・非表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:IsSupportCompactOverlayTrigger />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CompactOverlayButton.Visibility" Value="Visible" />
            <Setter Target="CompactOverlayButton_Menu.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- セカンダリウィンドウ時にTitleBarの余白を追加する -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SecondaryWindowTopMarginBorder.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- タッチ操作時にウィンドウ操作関係のボタンを押しやすくする -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.InteractionMode}" EqualTo="Touch" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="TitleBarWindowActionsPanel.Spacing" Value="12" />
            <Setter Target="TitleBarWindowActionsPanel.Height" Value="48" />
            <Setter Target="FullscreenButton.MinWidth" Value="48" />
            <Setter Target="FullscreenButton.MinHeight" Value="48" />
            <Setter Target="FullscreenButton.BorderBrush" Value="{ThemeResource ButtonPointerOverBackgroundThemeBrush}" />
            <Setter Target="CompactOverlayButton.MinWidth" Value="48" />
            <Setter Target="CompactOverlayButton.MinHeight" Value="48" />
            <Setter Target="CompactOverlayButton.BorderBrush" Value="{ThemeResource ButtonPointerOverBackgroundThemeBrush}" />
            <Setter Target="SmallWindowButton.MinWidth" Value="48" />
            <Setter Target="SmallWindowButton.MinHeight" Value="48" />
            <Setter Target="SmallWindowButton.BorderBrush" Value="{ThemeResource ButtonPointerOverBackgroundThemeBrush}" />

            <Setter Target="CloseButton.BorderBrush" Value="{ThemeResource ButtonPointerOverBackgroundThemeBrush}" />

          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      
      <!-- Xboxで表示している場合、UI表示切り替え後のフォーカス設定を切り替える -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding CurrentPlayerDisplayView.Value, Mode=OneWay}" EqualTo="SecondaryView" />
          </VisualState.StateTriggers>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:EqualsStateTrigger Value="{Binding ApplicationLayoutManager.AppLayout}" EqualTo="TV" />
            <windowsTriggers:DeviceFamilyStateTrigger DeviceFamily="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="FocusWhenShowingControlUIAction.IsEnabled" Value="True" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- Xboxで表示している時にコピーアクションのボタンを非表示に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <windowsTriggers:DeviceFamilyStateTrigger DeviceFamily="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CopyActionsAppBarButton.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- Xbox時のレイアウト調整 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlContentLayout.Padding" Value="48 0 48 27" />
            <Setter Target="UIControlHeaderLayout.Margin" Value="48 27 48 0" />
            <Setter Target="UIControlCenterLayout.Margin" Value="48 0" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      

      <!-- ニコスクリプト: シーク禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowSeekDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SeekBarSlider.IsEnabled" Value="False" />
            <Setter Target="SeekDisabledFromNicoScriptText.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      <!-- ニコスクリプト: コメント禁止 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding CommentPlayer.NowCommentSubmitDisabledFromNicoScript}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentTextBox.IsEnabled" Value="False" />
            <Setter Target="CommentTextBox.PlaceholderText" Value="{i18nExt:Localize Key=DisableCommentSubmitFromNicoScript}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>



      <!-- コントロールUI中央の表示 -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding VideoEndedRecommendation.HasRecomend.Value}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="PlayEndedRecommendContainer.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:CompositeStateTrigger Operator="And">
              <StateTrigger IsActive="{Binding VideoEndedRecommendation.HasRecomend.Value}" />
              <myTrigger:CompositeStateTrigger Operator="Or">
                <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
                <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}"/>
              </myTrigger:CompositeStateTrigger>
            </myTrigger:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
            <Setter Target="PlayEndedRecommendContainer.Visibility" Value="Visible" />
            <Setter Target="RecommendVideoTitle.Style" Value="{StaticResource CaptionTextBlockStyle}" />
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{Binding PlayerView.IsCompactOverlay, Mode=OneWay}" />
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="UIControlCenterLayout.Background" Value="{ThemeResource SystemAltMediumColor}" />
            <Setter Target="CenterTopGradient.Visibility" Value="Collapsed" />
            <Setter Target="CenterBottomGradient.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!-- 小窓状態の時、コントローラーのショートカット操作を無効に -->
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <myTrigger:WindowInWindowViewModeTrigger myExt:DependencyObjectExtensions.DisposeOnUnloadedTarget="{Binding ElementName=RootLayout}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
            <Setter Target="ConrollerHidePlayerTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekPreviewTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerSeekForwardTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerTogglePlayPauseTrigger.IsEnabled" Value="False" />
            <Setter Target="ControllerToggleDisplayUITrigger.IsEnabled" Value="False" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>




      <!-- コメントコマンドが未選択 -->
      <!--
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind CommandEditer.CommandString, Converter={StaticResource EmptyStringToBoolean}, Mode=OneWay}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CommentCommandEditButton.Content"
                    Value="{i18nExt:Localize Key=CommentCommand}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      -->

    </VisualStateManager.VisualStateGroups>

  </Grid>
</UserControl>
